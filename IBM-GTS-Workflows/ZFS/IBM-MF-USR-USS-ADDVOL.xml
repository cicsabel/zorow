<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
/******************************************************************************/
/* Copyright Contributors to the zOS-Workflow Project.                        */
/* SPDX-License-Identifier: Apache-2.0                                        */
/******************************************************************************/
-->
<workflow>
    <workflowInfo>
        <workflowID>HFS/zFS extend to a new volume</workflowID>
        <workflowDescription>Add a new volume to an USS file system</workflowDescription>
        <workflowVersion>1.0</workflowVersion>
        <vendor>IBM CIC Brno - Czech Republic</vendor>
        <Configuration>
            <productID>USS</productID>
            <productName>USS</productName>
            <productVersion>Version 1</productVersion>
        </Configuration>
    </workflowInfo>
    <variable name="fs">
        <label>HFS/zFS</label>
        <abstract>File system name</abstract>
        <description>Specify a file system name (can be HFS or zFS) where you want to add volume(s)</description>
        <category>USS</category>
        <string>
            <validationType>DSNAME</validationType>
            <default>MY.ZFS</default>
        </string>
    </variable>
    <variable name="volume">
        <label>NEW VOLs</label>
        <abstract>Volume(s) to add</abstract>
        <description>Specify number of volumes to add, each "*" is one volume. * * * adds 3 volumes. You can add also a specific volume serial name.</description>
        <category>USS</category>
        <string>
            <default>*</default>
        </string>
    </variable>
    <step name="submitJCL" optional="false">
        <title>HFS/zFS </title>
        <description>
    <h1>
                <b>Extend HFS/zFS to a new volume</b>
            </h1>
    <h2>
                <b>New volume(s) can be added to already existing HFS/zFS</b>
            </h2>
    The Workflow is used to extend an already existing HFS/zFS to a new volume(s)<br/>
    You need to provide, existing HFS/zFS name and number of volumes you want to add.<br/>
    Each "*" represents one additional volume. You can also put in specific volume names separated by blank.<br/>
    <br/>
    The Workflow automatically detects if the HFS/zFS is mounted and in such a situation does a remount-same mode to activate the change.
    <br/>
    <br/>
    In case of questions please send an email to <a href="mailto:miroslav_kubik@cz.ibm.com">miroslav_kubik@cz.ibm.com</a>
    </description>
        <variableValue name="fs" required="true"/>
        <variableValue name="volume" required="true"/>
        <instructions substitution="false">
	1. Make sure you put correct file system name you want to extend<br/>
	2. Run the Workflow<br/>
	3. Expected return codes: 0 - volume(s) added successfully and remount done. 4 - volume(s) added, remount not needed.<br/>
	
	Note: In case file system is mounted, remount - samemode will be done 
	</instructions>
        <weight>1</weight>
        <skills>MVS</skills>
        <autoEnable>false</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <template>
            <inlineTemplate substitution="true">//REXXDATA  EXEC  PGM=IEBUPDTE,PARM=NEW 
//SYSPRINT  DD DUMMY 
//SYSUT2    DD DISP=(,PASS),UNIT=3390,SPACE=(TRK,(10,1,1)), 
//             RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PO 
//SYSIN     DD * 
./ ADD NAME=ALTREXX 
 /*REXX*/ 
                                                              
'DELSTACK' 
cc = 0 
                                                              
dsn = '${instance-fs}' 
                                                              
call profile_Off 
call get_Type dsn 
call get_Mnt dsn 
if mounted = 1 then do 
 Say 'Dataset 'dsn 'is mounted on 'out.1 
 Say 'Adding volumes ' 
 Say 're-mount will be done' 
 queue " UNMOUNT FILESYSTEM("dsn") REMOUNT(SAMEMODE)" 
 "EXECIO" queued() "DISKW IKJEFT01 (FINIS" 
 'DELSTACK' 
 cc = 0 
end 
else do 
 Say 'Dataset 'dsn 'is not mounted' 
 Say 'Adding volumes ' 
 cc = 4 
end 
                                                                        
queue " ALTER '"r_dsn"' ADDVOLUMES(${instance-volume})" 
"EXECIO" queued() "DISKW IDCAMS (FINIS" 
                                                                        
call profile_On 
                                                                        
'DELSTACK' 
                                                                        
exit cc 

dsn_CHCK: 
                                                                        
chck = SYSDSN("'"dsn"'") 
                                                                        
if chck &lt;&gt; 'OK' then do 
                                                                        
 emsg = 'Error: dataset 'dsn 'does not exist' 
                                                                        
 call end_Error 8 
                                                                        
end 
                                                                        
return 
                                                                        
get_Type: 

 parse arg dsn 
                                                                        
 x=outtrap("listc.") 
   'listc ent('dsn') all' 
 x=outtrap("off") 
 do i=1 to listc.0 
  if Pos('ERROR QUALIFYING',listc.i) &gt; 0 then do 
    emsg = 'Error: dataset 'dsn 'not found' 
    call end_Error 8 
  end 
  if Pos('DSNTYPE--------------HFS',listc.i) &gt; 0 then hfs = 1 
 end i 
                                                                        
 if hfs = 1 then do 
  r_dsn = dsn 
 end 
 else do 
  r_dsn = dsn'.DATA' 
 end 
return 
                                                                        
get_Mnt: 
call bpxwunix 'df | grep "('dsn')" | cut -f1 -d" "',,out. 
         if out.1 &lt;&gt; 'OUT.1' then mounted = 1 
                                                                        
return 

profile_Off: 
                                                                  
 'profile nopref' 
                                                                  
return 
                                                                  
profile_On: 
                                                                  
 'profile prefix('userid()')' 
                                                                  
return 
                                                                  
end_Error: 
                                                                  
 parse arg cc 
 Say emsg 
                                                                  
 call profile_On 
 'DELSTACK' 
                                                                  
 Exit cc 

//REXXEX   EXEC PGM=IKJEFT01 
//SYSPRINT DD SYSOUT=* 
//SYSPROC  DD DSN=*.REXXDATA.SYSUT2,DISP=(OLD,DELETE) 
//IDCAMS    DD DISP=(,PASS),UNIT=3390,SPACE=(TRK,(10,1)), 
//             RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS 
//IKJEFT01  DD DISP=(,PASS),UNIT=3390,SPACE=(TRK,(10,1)), 
//             RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS 
//SYSTSPRT  DD SYSOUT=* 
//SYSTSIN  DD * 
 %ALTREXX 
//IFALT     IF  (REXXEX.RC &lt;= 4) THEN 
//ALTER     EXEC  PGM=IDCAMS 
//SYSPRINT  DD    SYSOUT=A 
//SYSIN     DD    DSN=*.REXXEX.IDCAMS,DISP=(OLD,DELETE) 
//IFALTEND  ENDIF 
//IFMNT     IF  (REXXEX.RC = 0 &amp; ALTER.RC = 0) THEN 
//RMNT     EXEC PGM=IKJEFT01 
//SYSPRINT DD SYSOUT=* 
//SYSTSPRT  DD SYSOUT=* 
//SYSTSIN  DD DSN=*.REXXEX.IKJEFT01,DISP=(OLD,DELETE) 
//IFMNTEND  ENDIF                                                                                                                   
       	</inlineTemplate>
            <submitAs maxRc="4">JCL</submitAs>
            <maxLrecl>80</maxLrecl>
        </template>
    </step>
</workflow>
