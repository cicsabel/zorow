###################################################################
# File section
###################################################################

# Set the location of where CC, Liberty and Java are installed
JAVA_HOME=/java/java17_bit64_sr7_fp0/J17.0_64
WLP_INSTALL_DIR=/usr/lpp/liberty_zos/current
CC_INSTALL_DIR=/usr/lpp/IBM/uko/v3r1/base

# Set zFS configuration properties.
# a dataset will be created and mounted in a subdir with the server name
WLP_USER_DIR=/etc/liberty
# if specified, a dataset will be created and mounted in a subdir with the server name
WLP_OUTPUT_DIR=/var/liberty
# Dataset HLQ for the 2 zFS datasets to be created, 
# which will be mounted to the server and output directory
CC_FILE_SYSTEM_HLQ=UKO.CC.ZFS
# VOLUME value that is used in the creation of the zFS data sets, for example, SYSDA. 
# IF SMS (Storage Management Subsystem) is used, specify ZOS_VSAM_VOLUME=SMS 
ZOS_VSAM_VOLUME=SMS 	
# If you don't use SMS, you must also specify the DATACLASS for VSAM creation.
# If you use SMS, you can omit this parameter as it will be ignored
# ZOS_ZFS_DATACLASS=ZFSDC

# The proclib dataset into which the proc for starting the server and agent
# will be created.
ZOS_PROCLIB=USER.PROCLIB
ZOS_PARMLIB=USER.PARMLIB

###################################################################
# CC users parameters
###################################################################
# Flags used by the ccusers template and workflows to decide, whether to create groups and/or users.

# user IDs and groups required for CC setup
# If CC_CREATE_TECHNICAL_USER_GROUPS is true, the groups with the specified values will be created:
# CC_SERVER_STC_GROUP, CC_UNAUTHENTICATED_GROUP 
CC_CREATE_TECHNICAL_USER_GROUPS=true
CC_TECHNICAL_SUPERIOR_GROUP=SYS1
# If CC_CREATE_TECHNICAL_USERIDS is true, the users with the specified values will be created:
# CC_SERVER_STC_USER, CC_UNAUTHENTICATED_USER 
CC_CREATE_TECHNICAL_USERIDS=true

# Directory of the user homes, required for technical users
USER_HOME_PARENT_DIR=/u

###################################################################
# Keyring parameters
###################################################################
# Flags used by the cckeyring workflows to decide, whether to create CA, keygring(s) or certificates

# Flag, whether to create the CA to be used to sign the certificates
CC_CREATE_CA=false
# The label of the CA to be used to sign the generated certificates
# The CA will also be added to the keyring
CC_CA_LABEL=UkoLibertyCA

# Flag, whether to create the keyring(s)
CC_CREATE_KEYRING=true
# if CC_USE_KEYRING_AS_TRUST_STORE is set to true, then 
# the value for CC_TLS_TRUST_STORE_KEY_RING will be ignored and
# the name of CC_TLS_KEY_STORE_KEY_RING will be used for both, key and trust store and 
# no separate trust ring is created. 
CC_USE_KEYRING_AS_TRUST_STORE=true

# Flag, whether to create all certificates 
CC_CREATE_CERTIFICATES=false

# CN, OU and O values for generating CA and certificates if requested,
# if more or fewer DN-components are needed, the JCL can be modifed in the workflow.
CC_TLS_KEY_STORE_SERVER_CERT_CN=uko.example.com
CC_TLS_KEY_STORE_SERVER_CERT_OU=security
CC_TLS_KEY_STORE_SERVER_CERT_O=ORG

# -------------------------------------------------------
# parameters that are required by the UKO Server
# -------------------------------------------------------

# Keyring value containing the required certificates and CAs
CC_TLS_KEY_STORE_KEY_RING=UkoKeyRing
CC_TLS_TRUST_STORE_KEY_RING=UkoKeyRing

# TLS Server certificate name
CC_TLS_KEY_STORE_SERVER_CERT=UkoLibertyServer
# Certificate for OpenID Connect (OIDC), used to sign the json web token
CC_OIDC_PROVIDER_CERT=UkoOpenid 

###################################################################
# Liberty Server parameters
###################################################################
# started task name of the CC Liberty server
CC_SERVER_STC_NAME=CCSERV

# -------------------------------------------------------
# Userids and groups required for the Liberty Server
# -------------------------------------------------------
# Started task userid for the Liberty server and the corresponding parent group
CC_SERVER_STC_USER=CCSU
CC_SERVER_STC_GROUP=CCSG

# Unauthenticated user for the Liberty server, the default is WSGUEST, and the corresponding parent group
CC_UNAUTHENTICATED_USER=CCUU
CC_UNAUTHENTICATED_GROUP=CCUG

# -------------------------------------------------------
# network properties
# -------------------------------------------------------
# -1 means that this type of connectivity is disabled
# Otherwise indicates the port number that the server will be listening on
CC_HTTP_PORT=-1
CC_HTTPS_PORT=443
# If you want to use mTLS to connect to the HTTPS port, set ENABLE_MTLS_VIA_HTTPS_PORT to true
ENABLE_MTLS_VIA_HTTPS_PORT=true

# -------------------------------------------------------
# other server-related properties
# -------------------------------------------------------

# SAF prefix to be used for profiles in the EJBROLE class, the default is EKMFWEB
SAF_PROFILE_PREFIX=EKMFWEB

# If a name is specified, the server will connect to this named angel, otherwise to the default angel
WLP_ANGEL_NAME=UKOANG

#CC_TRACE_OPTIONS="*=info:com.ibm.ccc.ekmf.*=info:com.ibm.ccc.cryptoconnect.*=info:com.ibm.ccc.crypto.*=info"

###################################################################
# Key name parameters
###################################################################

# The key prefix is used to generate a CC_KEY_PREFIX.** profile 
# in the CSFKEYS class. 
CC_KEY_PREFIX=CC

###################################################################
# Other
###################################################################

# Directory for creating temporary files
TEMP_DIR=/tmp

# SAF owner to be used when creating SAF profiles
SAF_OWNER=RACFADMN

###################################################################
# MSDKE parameters
###################################################################

# Will connection to Microsoft Double Key Encryption be required
MSDKE_SUPPORT_REQUIRED=true

# Should the integrated test HTTP service for MSDKE be enabled? Note that this is not
# recommended for production
MSDKE_ENABLE_HTTP_SERVICE=false

# Label of the certificate used for mTLS authentication with rabbitM
MSDKE_RABBIT_CERT=MSDKE.SERVICE

# CA that signed the certificate used for mTLS authentication with rabbitMQ
MSDKE_RABBIT_CA="RABBIT CA"

# The URI to use when connecting to a Rabbit MQ server
MSDKE_RABBIT_URI=amqps://amqp.rabbit.ccc.eu-de.containers.appdomain.cloud:443

# The KEK label to use when decrypting keys in MSDKE
# ==> Example: MSDKE.RSA.KEK00001
MSDKE_WRAPPING_KEK_LABEL=ROBOT.MSDKE.WRAPPING.KEK

# Rabbit MQ virtual host, to separate e.g. test from development queues
#MSDKE_RABBIT_VIRTUAL_HOST=/

# A comma-separated list of trusted keys; they are printed out by UKO
# and/or other instances of MSDKE Crypto service when the server starts
#MSDKE_EC_TRUSTED_KEYS_X509_ENCODED=30819B301006072A8648CE3D020106052B8104002303818600040070F7961732EF440C65BA051250719CCF5183982CEB76292A1A39B73E43E396BF221F1748EE3C33B20C518582013DC8D8FC997B0F44A4D09194807263EB0B9547EF00FB6D9837F37E1F145DAAED2DB48CA0BD0A3043CF28A8AAD789F2151F860935F4B3C3F5E98B6E170B7166E96802C3C305F5A1A34AD1ABDEF6A53289998B669307F7,30819B301006072A8648CE3D020106052B81040023038186000401EC0E51848E6882FED7CCEA37ED4A7FC0B3BE6B44356A485E3ABB4320B3AD57DE1A283D5EE9465903B12381D83F6247349B3AFC48A3D05036AC06968202F4E76813005281CDD655CB0C78EB343917DE1095E74971B12B0E4FF238619C6CD7B186C68A0322819A38014BC2B4D14C16BA29EE20864537207DB1CC5324EE40AD030BD5646E,30819B301006072A8648CE3D020106052B810400230381860004001BA6A609B42E9E235EBD3986E0591A2A49E7A785F2BD26919DD956D9C7375B2C8FBB3A7D1BB667D776B57F6177C3C9B68881CB873F8CD7986E3794BE0845B06D7000F6CE196A1E0F8CBDB6CDED5F9BA7D900AAB4509842F6F4B9B2AA64D4AF9DE613B78EBC8380D087F6E98264A56A5FC14E0ADB555CC1DC3DB4EF7747C46BA770C317,30819B301006072A8648CE3D020106052B810400230381860004015A4013C9529EA86682C170F1E07806F8FD9241D2EC49CB86BCBEFD3E2D1E5FFF568FA0A69311189DF40025534E6F71FD44EEF28A68B95BB0C41307AC25E06EF6CE01496204A8A5AC8E7AA25E2519754B111D3BC8F8AC78E438394CBC9E724915D3B4E0CA724F9C1C9635ECCC40BAC944298589FD364C0B09A842E77DD00DE714878380,30819B301006072A8648CE3D020106052B810400230381860004001BA6A609B42E9E235EBD3986E0591A2A49E7A785F2BD26919DD956D9C7375B2C8FBB3A7D1BB667D776B57F6177C3C9B68881CB873F8CD7986E3794BE0845B06D7000F6CE196A1E0F8CBDB6CDED5F9BA7D900AAB4509842F6F4B9B2AA64D4AF9DE613B78EBC8380D087F6E98264A56A5FC14E0ADB555CC1DC3DB4EF7747C46BA770C317
MSDKE_EC_TRUSTED_KEYS_X509_ENCODED=*

# The EC identity key label to use by this MSDKE Crypto Service
MSDKE_EC_IDENTITY_KEY_LABEL=EKMF.WEB.IDENTITY.KEY

# -------------------------------------------------------
# MSDKE database parameters
# -------------------------------------------------------
# At least one of the MSDKE services needs access to the keystore database

# MSDKE Keystore Db2 location on z/OS
# required in the server.env configuration
# ==> Example: CPHMVSF_DB2F
DB_LOCATION=DSNV133N

# ==> Example: KRYTESTO
DB_CURRENT_SCHEMA=UKO0HDB

# Db2 lib path parameter, required for server.env
# ==> Example: /usr/lpp/db2c10/db2c10/jdbc/lib
DB_LIBPATH=/db2/db2v13/jdbc/lib
# Db2 class path parameter, required for server.env
# ==> Example: /usr/lpp/db2c10/db2c10/jdbc/classes
DB_CLASSPATH=/db2/db2v13/jdbc/classes

# -------------------------------------------------------
# database access
# -------------------------------------------------------
# To grant access to the MSDKE views, the following parameters are required

# HLQ where Db2 is installed, also required for the Liberty server started task
DB_HLQ=SYS2.DB2.V13
# The Db2 SSID, also required by the server jvm.options file 
DB_JCC_SSID=DL3N
# PROGRAM, PLAN and LIB parameters to execute GRANT
DB_PROGRAM=DSNTEP2
DB_PLAN=DSNTEP13
DB_RUNLIB=DSNV133N.RUNLIB.LOAD

###################################################################
# Crypto Connect parameters
###################################################################

# Should the Crypto Connect encrypt and decrypt service be enabled?
CRYPTO_CONNECT_SUPPORT_REQUIRED=true

# User group to grant access to the Crypto Connect related EJBROLE 
# and APPL definitions
CRYPTO_CONNECT_USER_GROUP=CCUSERS