<?xml version="1.0" encoding="UTF-8"?>

<!-- Declare external file containing WAS variables referenced in the following steps -->
<!DOCTYPE workflow [<!ENTITY variables SYSTEM "variable_imports.xml">
                    <!ENTITY image_properties SYSTEM "extensions/image_properties.xml">
                    ]> 
                    
<!--
/******************************************************************************/
/* Copyright Contributors to the zOS-Workflow Project.                        */
/* SPDX-License-Identifier: Apache-2.0                                        */
/******************************************************************************/
-->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../workflow/schemas/workflow_v1.xsd">
    <!--  Note: The schema workflow_v1.xsd is shipped with z/OSMF. To use the schema
          to validate this XML, modify the above schema location to point to the 
          schema in z/OSMF, or copy the schema to an appropriate location.  -->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- EKMF Web Provisioning : Provision an EKMF Agent                      -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

  <workflowInfo>
      <workflowID>ekmfagent_Provision</workflowID>
      <workflowDescription>Provision an EKMF Web agent</workflowDescription>
    <workflowVersion>1.0.0.0</workflowVersion>
        <!-- Build timestamp 2021.05.09.21.03.24 -->
      <vendor>IBM</vendor>
      <Provisioning>
          <productID>5655-EKM</productID>
          <productName>EKMF Web</productName>
          <productVersion>V2R1+</productVersion>
          <softwareType>EKMFAgent</softwareType>
      </Provisioning>
  </workflowInfo>
  
  	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!--     Include WAS variables used by the following steps -->
	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	&variables;
	&image_properties;

    <!--+++++++++++++++++++++++-->
    <!--   Validation Steps    -->
    <!--+++++++++++++++++++++++-->  
    <step name="createVariables" optional="false">
        <title>Create variable names</title>
        <description>Generate variable names in case they are supposed to be temporary</description>
        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_ZFS}</runAsUser>
        <approver substitution="true">$!{instance-EKMF_APPROVER_ZFS}</approver>
        <instructions substitution="true">Submit shell script to execute step</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
                # Create a properties file to populate instance variables
                # This is read by the output element in the workflow step.
                echo "EKMF_TEMPLATE_VALIDATION_PASSED true" > ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties

                #if(${instance-EKMF_AGENT_STC} &amp;&amp; ${instance-EKMF_AGENT_STC} != "")
                    echo "EKMF_AGENT_STC ${instance-EKMF_AGENT_STC}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                #else
                    echo "EKMF_AGENT_STC ${_workflow-softwareServiceInstanceName}A" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                #end

                chmod 744 ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
            </inlineTemplate>
            <submitAs>shell-JCL</submitAs>
            <output substitution="true" needResolveConflicts="false">${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties</output>
        </template>
    </step>
    
    <step name="validateConsoleAPI" optional="false">
        <title>Validating console commands can be issued</title>
        <description>Issue a command via the console API to ensure basic commands can be executed.</description>
        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_CONSOLE}</runAsUser>
        <approver substitution="true">$!{instance-EKMF_APPROVER_CONSOLE}</approver>
        <condition>
             <expression><![CDATA["1" == "1"]]></expression>
             <description>Should the step be executed based on the VALIDATE_PARAMETERS setting</description>
             <targetStateSet>
                 <description>Only validate if VALIDATE_PARAMETERS is YES</description>
                 <extendStateExpression>
                     <description>Only validate if VALIDATE_PARAMETERS is YES</description>
                     <expression><![CDATA[ ${instance-VALIDATE_PARAMETERS} == "NO"]]></expression>
                     <targetState>Skipped</targetState>
                 </extendStateExpression>
             </targetStateSet>
        </condition>
        <variableValue name="EKMF_AGENT_STC" scope="instance" noPromptIfSet="false" required="false"/>
        <instructions>Execute console API to check if its set up correctly</instructions>
        <weight>1</weight>
        <skills>z/OS administration</skills>
        <autoEnable>true</autoEnable>
        <rest>
            <httpMethod>PUT</httpMethod>
            <uriPath substitution="true">/zosmf/restconsoles/consoles/defcn</uriPath>
            <requestBody substitution="true">
                { 
                  "cmd" : "d a,${instance-EKMF_AGENT_STC}",
                  "sol-key" : "NOT FOUND",
                  "system" : "${_workflow-systemName}"
                  
                }
            </requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="EKMF_REST_STATUS">["sol-key-detected"]</propertyMapping>
        </rest>
    </step>

    <!--++++++++++++++++++++++-->
    <!--   Provision Steps    -->
    <!--++++++++++++++++++++++-->  

    <step name="allocateNetworkResources">
    <title>Allocate Network Resources</title>
    <description>Allocate ports for the new server using REST calls to the CA.</description>
		<step name="allocateAgentPort">
	        <title>Allocate Agent Port</title>
	        <description>Make a REST call to allocate Agent Port</description>
            <condition>
                <expression><![CDATA["1" == "1"]]></expression>
                <description>Always perform</description>
                <targetStateSet>
                    <description>Only allocate dynamic port if requested</description>
                    <extendStateExpression>
                        <description>Skip if a port has been defined</description>
                        <expression><![CDATA[ ${instance-EKMF_AGENT_PORT} != undefined && ${instance-EKMF_AGENT_PORT} != ""]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
            </condition> 
			<instructions substitution="false">
	        Execute step to allocate Agent Port from z/OS Communications Server.
	        </instructions>
	        <weight>10</weight>
	        <skills>REST</skills>
	        <autoEnable>true</autoEnable>
			<rest>
				<httpMethod>POST</httpMethod>
				<uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
				<requestBody substitution="true">
					{
                        "template-uuid" : "${_workflow-templateID}",
                        "template-name" : "${_workflow-templateName}",
                        "tenant-id" : "${_workflow-tenantID}",
                        "network-parms" :
                            {   

                                "name" : "${instance-EKMF_AGENT_STC}",
                                "intent":"exclusive",
                                "job-name" : "${instance-EKMF_AGENT_STC}",        
                                "system-name" : "${_workflow-systemName}"
                            }
                    }	
				</requestBody>
				<expectedStatusCode>200</expectedStatusCode>
				<propertyMapping mapTo="EKMF_AGENT_PORT">["port"]</propertyMapping>
				<propertyMapping mapTo="EKMF_AGENT_PORT_ID">["id"]</propertyMapping>
			</rest>
		</step>
	</step>


    <step name="configureSecurity">
    	<title>Configure Security for EKMF Agent</title>
    	<description>Configure security for EKMF Agent and related resources</description>

        <step name="configureSAFSecurityProfiles">
            <title>Configure SAF Security</title>
            <description>Configure EKMF Agent Security</description>
            <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SECURITY}</runAsUser>
            <approver substitution="true">$!{instance-EKMF_APPROVER_SECURITY}</approver>
            <variableValue name="EKMF_AGENT_STC" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="EKMF_AGENT_TASK_USER" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="EKMF_AGENT_TASK_GROUP" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="EKMF_CLIENT_USER" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="EKMF_CLIENT_GROUP" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit rexx exec to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <fileTemplate substitution="true">extensions/defineSecurity.rexx</fileTemplate>
                <submitAs maxRc="0">TSO-REXX-JCL</submitAs>
                <maxLrecl>1024</maxLrecl>
            </template>
        </step>

        <step name="additionalSecuritySetup">
            <title>Additional Security Setup</title>
            <description>Specifying additional security settings</description>

            <step name="defineKeyAccess">
                <title>Key prefix creation</title>
                <description>Create entry in CSFKEYS class and grant access</description>
                <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SECURITY}</runAsUser>
                <approver substitution="true">$!{instance-EKMF_APPROVER_SECURITY}</approver>
                <variableValue name="EKMF_KEY_PREFIX" scope="instance" noPromptIfSet="false" required="false"/>
                <instructions>Executes a REXX program to create the key prefix</instructions>
                <weight>1</weight>
                <autoEnable>true</autoEnable>
                <template>
                    <fileTemplate substitution="true">extensions/defineKeyAccess.rexx</fileTemplate>
                    <submitAs maxRc="4">TSO-REXX-JCL</submitAs>
                    <maxLrecl>1024</maxLrecl>
                </template>
            </step>
            <step name="defineIcsfAccess">
                <title>Define access to ICSF</title>
                <description>Define the profiles in the CSFSERV class and grant access</description>
                <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SECURITY}</runAsUser>
                <approver substitution="true">$!{instance-EKMF_APPROVER_SECURITY}</approver>
                <instructions>Executes a REXX program to create profiles and grant access</instructions>
                <weight>1</weight>
                <autoEnable>true</autoEnable>
                <template>
                    <fileTemplate substitution="true">extensions/defineIcsfAccess.rexx</fileTemplate>
                    <submitAs maxRc="4">TSO-REXX-JCL</submitAs>
                    <maxLrecl>1024</maxLrecl>
                </template>
            </step>
        </step>

	</step>

    <step name="configureAgent">
    	<title>Configure EKMF Agent</title>
    	<description>Configure the agent to start as a started task</description>

        <step name="substituteAgentConfig">
            <title>Substitute KMGPARM</title>
            <description>Replace values in KMGPARM with template variable values</description>
            <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SERVER}</runAsUser>
            <approver substitution="true">$!{instance-EKMF_APPROVER_SERVER}</approver>
            <variableValue name="EKMF_CLIENT_USER" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="EKMF_AGENT_PORT" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="EKMF_KEY_PREFIX" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit shell script to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                    <inlineTemplate substitution="true">
                    echo "&amp;WEBCLIENT(${instance-EKMF_CLIENT_USER})" > ${instance-TEMP_DIR}/${instance-EKMF_AGENT_STC}-KMGPARM;    
                    sed "s#^\&amp;IP-PORT.*#\&amp;IP-PORT(${instance-EKMF_AGENT_PORT})#g;
                        s#^\&amp;WEBCLIENT.*#\&amp;WEBCLIENT(${instance-EKMF_CLIENT_USER})#g;
                        s#^\&amp;SYS-RSAKEK-PREFIX.*#\&amp;SYS-RSAKEK-PREFIX(${instance-EKMF_KEY_PREFIX}.RSAKEK)#g;
                        s#^\&amp;SYS-ECCSIGN-PREFIX.*#\&amp;SYS-ECCSIGN-PREFIX(${instance-EKMF_KEY_PREFIX}.ECCSIGN)#g" "//'${instance-EKMF_AGENT_HLQ}.SKMGSAMP(KMGOPCRY)'" >> ${instance-TEMP_DIR}/${instance-EKMF_AGENT_STC}-KMGPARM;

                    </inlineTemplate>
                <submitAs>shell-JCL</submitAs>
            </template>
        </step>

        <step name="copyAgentConfiguration">
		    <title>Copy KMGPARM into place</title>
	        <description>Copy KMGPARM template into the PROCLIB</description>
	        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SERVER}</runAsUser>
	        <approver substitution="true">$!{instance-EKMF_APPROVER_SERVER}</approver>
        	<instructions substitution="true">Submit JCL to execute step</instructions>
            <weight>5</weight>
            <autoEnable>true</autoEnable>
            <template>
               <fileTemplate substitution="true">jcl/copy-agent-config.jcl</fileTemplate>
               <submitAs>JCL</submitAs>
               <maxLrecl>80</maxLrecl>
          </template>
        </step> 

    	<step name="createAgentProc">
            <title>Create Agent Proc</title>
            <description>Create the agent proc</description>
       		<runAsUser substitution="true">$!{instance-EKMF_ADMIN_TSO}</runAsUser>
       		<approver substitution="true">$!{instance-EKMF_APPROVER_TSO}</approver>
            <variableValue name="EKMF_ZOS_PROCLIB" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="EKMF_AGENT_RUN_HLQ" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="TCPIP_HLQ" scope="instance" noPromptIfSet="false" required="false"/>
               <!-- <condition>
            	<expression><![CDATA[${createEkmfWebServer.stepState}=="Complete"]]></expression>
            	<description>Only perform check if server has been created</description>
        	</condition> -->
        	<instructions substitution="true">Submit JCL to execute step</instructions>
            <weight>5</weight>
            <autoEnable>true</autoEnable>
            <template>
               <fileTemplate substitution="true">jcl/create-agent-proc.jcl</fileTemplate>
               <submitAs>JCL</submitAs>
               <maxLrecl>80</maxLrecl>
          </template>
        </step>
	</step>


    <step name="startAgent">
        <title>Start the agent</title>
        <description>Start the agent</description>

        <step name="startAgent_console">
        	<title>Start the agent from console</title>
        	<description>Start the agent from the console</description>
        	<runAsUser substitution="true">$!{instance-EKMF_ADMIN_CONSOLE}</runAsUser>
	        <approver substitution="true">$!{instance-EKMF_APPROVER_CONSOLE}</approver>
	        <condition>
      			<expression><![CDATA["1" == "1"]]></expression>
				<description>Should the step be executed, based on the START_INSTANCE setting</description>
				<targetStateSet>
					<description/>
	      			<extendStateExpression>
	      				<description>Skip if START_INSTANCE == false</description>
	            		<expression><![CDATA[ ${instance-START_INSTANCE} == "false"]]></expression>
	      				<targetState>Skipped</targetState>
	      			</extendStateExpression>
				</targetStateSet>
			</condition>
     		<instructions substitution="false">Submitting script to stop the server.</instructions>
        	<weight>1</weight>
        	<autoEnable>true</autoEnable>
        	<rest>
				<httpMethod>PUT</httpMethod>
				<uriPath substitution="true">/zosmf/restconsoles/consoles/defcn</uriPath>
				<requestBody substitution="true">
				  {
				    "cmd" : "START ${instance-EKMF_AGENT_STC}",
				    "unsol-key" : "KMG240I EKMF AGENT CONSOLE INTERFACE READY",
				    "unsol-detect-sync" : "Y",
				    "unsol-detect-timeout" : "120",
				    "detect-time" : "120",
				    "system" : "${_workflow-systemName}"
				    
				  }	
				</requestBody>
				<expectedStatusCode>200</expectedStatusCode>
				<propertyMapping mapTo="AGENT_REST_STATUS">["status"]</propertyMapping>
			</rest>
    	</step>
    	
    	<step name="CheckStartupAgent" optional="false">
            <title>Checking the rest status from the start command</title>
            <description>Check the REST Status from the start command</description>
            <prereqStep name="startAgent_console"/>
            <runAsUser substitution="true">$!{instance-EKMF_ADMIN_TSO}</runAsUser>
            <approver substitution="true">$!{instance-EKMF_APPROVER_TSO}</approver>
            <condition>
                <expression><![CDATA[${startAgent_console.stepState} == "Complete" || ${startAgent_console.stepState} == "Skipped"]]></expression>
                <description>Should the step be executed based on the AGENT_REST_STATUS setting</description>
                <targetStateSet>
                    <description>Check to see whether this step should be skipped</description>
                    <extendStateExpression>
                        <description>Only execute it AGENT_REST_STATUS is not detected</description>
                        <expression><![CDATA[ ${instance-AGENT_REST_STATUS} == "detected"]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
	      			<extendStateExpression>
	      				<description>Skip if START_INSTANCE == false</description>
	            		<expression><![CDATA[ ${instance-START_INSTANCE} == "false"]]></expression>
	      				<targetState>Skipped</targetState>
	      			</extendStateExpression>
                </targetStateSet>
            </condition>
            <instructions>Execute simple Rexx command to always return a bad returncode</instructions>
            <weight>1</weight>
            <skills>z/OS Administration</skills>
            <autoEnable>true</autoEnable>
            <template>
                <inlineTemplate substitution="true">
                    exit 8
                </inlineTemplate>
                <submitAs maxRc="0">TSO-REXX-JCL</submitAs>
            </template>
        </step> 
    </step>

    <step name="cleanUpVariables">
        <title>Clean up variables</title>
        <description>Submit script to clean up temp variables</description>
        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SERVER}</runAsUser>
        <approver substitution="true">$!{instance-EKMF_APPROVER_SERVER}</approver>
        <instructions substitution="true">Submit shell script to execute step</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
            
                #Remove temporary files
                rm ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                if [ $? -gt 0 ]; then 
                    echo "no temp file needed to be deleted"
                fi

                rm ${instance-TEMP_DIR}/${instance-EKMF_AGENT_STC}-KMGPARM
                if [ $? -gt 0 ]; then 
                    echo "no temp KMGPARM file needed to be deleted"
                fi
                
            </inlineTemplate>
            <submitAs>shell-JCL</submitAs>
        </template>
    </step>


</workflow>