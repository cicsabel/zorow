<?xml version="1.0" encoding="UTF-8"?>

<!-- Declare external file containing WAS variables referenced in the following steps -->
<!DOCTYPE workflow [<!ENTITY variables SYSTEM "variable_imports.xml">
                    <!ENTITY image_properties SYSTEM "extensions/image_properties.xml">
                    ]> 
                    
<!--
/******************************************************************************/
/* Copyright Contributors to the zOS-Workflow Project.                        */
/* SPDX-License-Identifier: Apache-2.0                                        */
/******************************************************************************/
-->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../workflow/schemas/workflow_v1.xsd">
    <!--  Note: The schema workflow_v1.xsd is shipped with z/OSMF. To use the schema
          to validate this XML, modify the above schema location to point to the 
          schema in z/OSMF, or copy the schema to an appropriate location.  -->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- EKMF Web Provisioning : Provision keyring(s) and certificate(s)      -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

  <workflowInfo>
      <workflowID>ekmfkeyring_Provision</workflowID>
      <workflowDescription>Provision keyrings and certificates required for EKMF Web</workflowDescription>
    <workflowVersion>1.0.0.0</workflowVersion>
      <vendor>IBM</vendor>
      <Provisioning>
          <productID>5655-EKM</productID>
          <productName>EKMF Web</productName>
          <productVersion>V2R1+</productVersion>
          <softwareType>EKMFKeyring</softwareType>
      </Provisioning>
  </workflowInfo>
  
  	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!--     Include WAS variables used by the following steps -->
	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	&variables;
	&image_properties;

    <!--+++++++++++++++++++++++-->
    <!--   Validation Steps    -->
    <!--+++++++++++++++++++++++-->  
    <step name="createVariables" optional="false">
        <title>Create variable names</title>
        <description>Generate variable names in case they are supposed to be temporary</description>
        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_ZFS}</runAsUser>
        <approver substitution="true">$!{instance-EKMF_APPROVER_ZFS}</approver>
        <instructions substitution="true">Submit shell script to execute step</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">

                #if(${instance-CERTIFICATE_GENERATION_SUFFIX} &amp;&amp; ${instance-CERTIFICATE_GENERATION_SUFFIX} != "")
                    export THIS_INSTANCE=${instance-CERTIFICATE_GENERATION_SUFFIX}
                #else
                    export THIS_INSTANCE=${_workflow-softwareServiceInstanceName}
                #end

                echo "CERTIFICATE_GENERATION_SUFFIX ${THIS_INSTANCE}" > ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                # Create a properties file to populate instance variables with useful user information
                # This is read by the output element in the workflow step.
                echo "EKMF_TEMPLATE_VALIDATION_PASSED true" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties

                #if(${instance-EKMF_CA_LABEL} &amp;&amp; ${instance-EKMF_CA_LABEL} != "")
                    echo "EKMF_CA_LABEL ${instance-EKMF_CA_LABEL}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                #else
                    echo "EKMF_CA_LABEL EkmfWebLibertyCA.${THIS_INSTANCE}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                #end

                #if(${instance-EKMF_TLS_KEY_STORE_KEY_RING} &amp;&amp; ${instance-EKMF_TLS_KEY_STORE_KEY_RING} != "")
                    echo "EKMF_TLS_KEY_STORE_KEY_RING ${instance-EKMF_TLS_KEY_STORE_KEY_RING}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                #else
                    echo "EKMF_TLS_KEY_STORE_KEY_RING EkmfKeyRing.${THIS_INSTANCE}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                #end
                
                #if($!{instance-EKMF_USE_KEYRING_AS_TRUST_STORE} == "TRUE")
                    #if(${instance-EKMF_TLS_KEY_STORE_KEY_RING} &amp;&amp; ${instance-EKMF_TLS_KEY_STORE_KEY_RING} != "")
                        echo "EKMF_TLS_TRUST_STORE_KEY_RING ${instance-EKMF_TLS_KEY_STORE_KEY_RING}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                    #else
                        echo "EKMF_TLS_TRUST_STORE_KEY_RING EkmfKeyRing.${THIS_INSTANCE}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                    #end
                #else
                    #if(${instance-EKMF_TLS_TRUST_STORE_KEY_RING} &amp;&amp; ${instance-EKMF_TLS_TRUST_STORE_KEY_RING} != "")
                        echo "EKMF_TLS_TRUST_STORE_KEY_RING ${instance-EKMF_TLS_TRUST_STORE_KEY_RING}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                    #else
                        echo "EKMF_TLS_TRUST_STORE_KEY_RING EkmfTrustRing.${THIS_INSTANCE}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                    #end
                #end

                #if(${instance-EKMF_TLS_KEY_STORE_SERVER_CERT} &amp;&amp; ${instance-EKMF_TLS_KEY_STORE_SERVER_CERT} != "")
                    echo "EKMF_TLS_KEY_STORE_SERVER_CERT ${instance-EKMF_TLS_KEY_STORE_SERVER_CERT}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                #else
                    echo "EKMF_TLS_KEY_STORE_SERVER_CERT EkmfWebLibertyServer.${THIS_INSTANCE}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                #end

                #if(${instance-EKMF_OIDC_PROVIDER_CERT} &amp;&amp; ${instance-EKMF_OIDC_PROVIDER_CERT} != "")
                    echo "EKMF_OIDC_PROVIDER_CERT ${instance-EKMF_OIDC_PROVIDER_CERT}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                #else
                    echo "EKMF_OIDC_PROVIDER_CERT EkmfWebOpenid.${THIS_INSTANCE}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                #end

                chmod 744 ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
            </inlineTemplate>
            <submitAs>shell-JCL</submitAs>
            <output substitution="true" needResolveConflicts="false">${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties</output>
        </template>
    </step>
	
    <!--++++++++++++++++++++++-->
    <!--   Provision Steps    -->
    <!--++++++++++++++++++++++-->  
	

    <step name="createSAFKeyring">
        <title>Create SAF Certificate and Keyring</title>
        <description>If requested, create a unique SAF certificate and keyring</description>
        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SECURITY}</runAsUser>
        <approver substitution="true">$!{instance-EKMF_APPROVER_SECURITY}</approver>
        <!-- condition>
            <expression><![CDATA[${createEkmfWebServer.stepState}=="Complete"]]></expression>
            <description>Only perform when the EKMF Web server is created</description>
            <targetStateSet>
                <description>Only create certificate and keyring if requested</description>
                <extendStateExpression>
                    <description>Skip if a keyring has been named</description>
                    <expression><![CDATA[ ${instance-EKMF_TLS_KEY_STORE_KEY_RING} != undefined &&  ${instance-EKMF_TLS_KEY_STORE_KEY_RING} != ""]]></expression>
                    <targetState>Skipped</targetState>
                </extendStateExpression
            </targetStateSet>
        </condition -->
        <instructions>Executes a REXX program to create the SAF certificate and keyring.</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <fileTemplate substitution="true">extensions/defineKeyring.rexx</fileTemplate>
            <submitAs maxRc="0">TSO-REXX-JCL</submitAs>
            <maxLrecl>1024</maxLrecl>
        </template>
    </step>

    <step name="addCertificatesToTrustRing">
        <title>Add additional certificates to trust ring </title>
        <description>Add trusted certificates to the server's trust keyring</description>
        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SECURITY}</runAsUser>
        <approver substitution="true">$!{instance-EKMF_APPROVER_SECURITY}</approver>
        <instructions>Executes a REXX program to add certificates to the trust keyring, adjust the names to reflect your own local certificate labels</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <fileTemplate substitution="true">extensions/addTrustCertificates.rexx</fileTemplate>
            <submitAs maxRc="0">TSO-REXX-JCL</submitAs>
            <maxLrecl>1024</maxLrecl>
        </template>
    </step>


    <step name="cleanUpVariables">
        <title>Clean up variables</title>
        <description>Submit script to clean up temp variables</description>
        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SERVER}</runAsUser>
        <approver substitution="true">$!{instance-EKMF_APPROVER_SERVER}</approver>
        <instructions substitution="true">Submit shell script to execute step</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
            
                #Remove temporary files
                rm ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                if [ $? -gt 0 ]; then 
                    echo "no temp file needed to be deleted"
                fi
            </inlineTemplate>
            <submitAs>shell-JCL</submitAs>
        </template>
    </step>

</workflow>