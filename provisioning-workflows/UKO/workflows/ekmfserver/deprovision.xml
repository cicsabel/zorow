<?xml version="1.0" encoding="UTF-8"?>
<!-- Declare external file containing WAS variables referenced in the following steps -->
<!DOCTYPE workflow [<!ENTITY variables SYSTEM "variable_imports.xml">
                    <!ENTITY step_stop_ekmfweb SYSTEM "steps/stop_ekmfweb.xml">
                    ]> 
                    
<!--
/******************************************************************************/
/* Copyright Contributors to the zOS-Workflow Project.                        */
/* SPDX-License-Identifier: Apache-2.0                                        */
/******************************************************************************/
-->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                          xsi:noNamespaceSchemaLocation="../workflow/schemas/workflow_v1.xsd">    
    <!--  Note: The schema workflow_v1.xsd is shipped with z/OSMF. To use the schema
          to validate this XML, modify the above schema location to point to the 
          schema in z/OSMF, or copy the schema to an appropriate location.  -->

<!-- 
	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
 	+  EKMF Web Deprovision: Deprovision a server.                                +
	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
-->

  <workflowInfo>
      <workflowID>ekmfserver_Deprovision</workflowID>
      <workflowDescription>Deprovision an EKMF Web server.</workflowDescription>
    <workflowVersion>1.0.0.0</workflowVersion>
        <!-- Build timestamp 2021.05.09.21.03.24 -->
      <vendor>IBM</vendor>
      <Provisioning>
          <productID>5655-EKM</productID>
          <productName>EKMF Web</productName>
          <productVersion>V2R1+</productVersion>
          <softwareType>EKMFWEB</softwareType>
      </Provisioning>
  </workflowInfo>

  <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!--     Include WAS variables used by the following steps -->
	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	&variables;

    <!--++++++++++++++++++++++-->
    <!--   Deprovision Steps  -->
    <!--++++++++++++++++++++++-->
    &step_stop_ekmfweb;

    <step name="deprovisionEkmfWebServer">
        <title>Deprovision the EKMF Web server</title>
        <description>Submit script to deprovision an EKMF Web server.</description>
        
        <step name="deleteAndUnmountZFS">
	        <title>Delete and unmount ZFS</title>
	        <description>If created, delete and unmount the ZFS</description>
	        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_ZFS}</runAsUser>
	        <approver substitution="true">$!{instance-EKMF_APPROVER_ZFS}</approver>
            <condition>
               <expression><![CDATA["1" == "1"]]></expression>
               <description>Should the step be executed if an APPLID has been set</description>
               <targetStateSet>
                   <description>Only execute if an validation has been passed</description>
                   <extendStateExpression>
                       <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                       <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                       <targetState>Skipped</targetState>
                   </extendStateExpression>
               </targetStateSet>
            </condition>
	        <instructions substitution="true">Run commands to delete the SAF certificate and keyring.</instructions>
	        <weight>1</weight>
	        <autoEnable>true</autoEnable>
	        <template>
	          <fileTemplate substitution="true">jcl/delete-zfs.jcl</fileTemplate>
	          <submitAs>JCL</submitAs>
	      	</template>
		</step>
		
        <step name="deleteInstanceDirectory">
	       <title>Delete instance directory</title>
	       <description>Delete the directory for this server instance</description>
	        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SERVER}</runAsUser>
	        <approver substitution="true">$!{instance-EKMF_APPROVER_SERVER}</approver>
            <condition>
               <expression><![CDATA["1" == "1"]]></expression>
               <description>Should the step be executed if an APPLID has been set</description>
               <targetStateSet>
                   <description>Only execute if an validation has been passed</description>
                   <extendStateExpression>
                       <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                       <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                       <targetState>Skipped</targetState>
                   </extendStateExpression>
               </targetStateSet>
            </condition>
			<instructions substitution="false">Submitting script to delete server.</instructions>
	       <weight>1</weight>
	       <autoEnable>true</autoEnable>
	       <template>
	           <inlineTemplate substitution="true">
	           if [ -d ${instance-EKMF_ZFS_MOUNTPOINT}/servers/${instance-EKMF_WEB_STC} ];
               then
	             rm -rf ${instance-EKMF_ZFS_MOUNTPOINT}/servers/${instance-EKMF_WEB_STC}
	           fi
               #if(${instance-WLP_OUTPUT_DIR} &amp;&amp; ${instance-WLP_OUTPUT_DIR} != "")
                    if [ -d ${instance-WLP_OUTPUT_DIR}/${instance-EKMF_WEB_STC} ];
                    then
                        rm -rf ${instance-WLP_OUTPUT_DIR}/${instance-EKMF_WEB_STC}
                    fi    
                #end           
	           </inlineTemplate>
	           <submitAs>shell-JCL</submitAs>
	       </template>
	   </step>
    </step>
 
    <step name="deleteIcsfAccess">
	        <title>Delete ICSF Access</title>
	        <description>Delete access to the ICSF profiles in CSFSERV</description>
	        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SECURITY}</runAsUser>
	        <approver substitution="true">$!{instance-EKMF_APPROVER_SECURITY}</approver>
			<condition>
			    <expression><![CDATA[${stopServer_console.stepState}=="Complete" || ${stopServer_console.stepState} == "Skipped"]]></expression>
			    <description>Check that the issue_stop stepState is Complete</description>
                <targetStateSet>
					<description>Check if we are using SAF certificates</description>
                    <extendStateExpression>
                        <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                        <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
				</targetStateSet>
			</condition>
        	<instructions>Executes a REXX program to delete the SAF certificate and keyring.</instructions>
        	<weight>1</weight>
        	<autoEnable>true</autoEnable>
        	<template>
            	<fileTemplate substitution="true">extensions/deleteIcsfAccess.rexx</fileTemplate>
            	<submitAs maxRc="0">TSO-REXX-JCL</submitAs>
            	<maxLrecl>1024</maxLrecl>
        	</template>
	</step>

    <step name="deleteRoles">
	        <title>Delete Roles</title>
	        <description>Delete access to the roles in EJBROLE</description>
	        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SECURITY}</runAsUser>
	        <approver substitution="true">$!{instance-EKMF_APPROVER_SECURITY}</approver>
			<condition>
			    <expression><![CDATA[${stopServer_console.stepState}=="Complete" || ${stopServer_console.stepState} == "Skipped"]]></expression>
			    <description>Check that the issue_stop stepState is Complete</description>
                <targetStateSet>
                    <description>Only execute if user ids were generated</description>
                    <extendStateExpression>
                        <description>Skip if EKMF_CREATE_USERIDS is false</description>
                        <expression><![CDATA[ ${instance-EKMF_CREATE_USERIDS} == "false"]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
			</condition>
        	<instructions>Executes a REXX program to delete access to the EJB roles.</instructions>
        	<weight>1</weight>
        	<autoEnable>true</autoEnable>
        	<template>
            	<fileTemplate substitution="true">extensions/deleteRoles.rexx</fileTemplate>
            	<submitAs maxRc="0">TSO-REXX-JCL</submitAs>
            	<maxLrecl>1024</maxLrecl>
        	</template>
	</step>

	<step name="deleteServerProc">                                                                  
         <title>Delete Server Proc</title>                                                           
         <description>Delete the server proc</description>   
         <runAsUser substitution="true">$!{instance-EKMF_ADMIN_TSO}</runAsUser>
	     <approver substitution="true">$!{instance-EKMF_APPROVER_TSO}</approver>                   
         <condition>
            <expression><![CDATA["1" == "1"]]></expression>
            <description>Should the step be executed if an APPLID has been set</description>
            <targetStateSet>
                <description>Only execute if an validation has been passed</description>
                <extendStateExpression>
                    <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                    <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                    <targetState>Skipped</targetState>
                </extendStateExpression>
            </targetStateSet>
         </condition>
     	 <instructions substitution="false">deleteProcs</instructions>                        
         <weight>5</weight>                                                                     
         <autoEnable>true</autoEnable>                                                          
         <template>                                                                             
           <fileTemplate substitution="true">jcl/delete-server-proc.jcl</fileTemplate>
           <submitAs maxRc="12">JCL</submitAs>
       </template>                                                                            
    </step>

    <step name="removeSAFSecurityProfiles">
        <title>Remove SAF security profiles</title>
        <description>Remove SAF security profiles created by this workflow</description>
        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SECURITY}</runAsUser>
	    <approver substitution="true">$!{instance-EKMF_APPROVER_SECURITY}</approver>
        <condition>
           <expression><![CDATA["1" == "1"]]></expression>
           <description>Should the step be executed if an APPLID has been set</description>
           <targetStateSet>
               <description>Only execute if an validation has been passed</description>
               <extendStateExpression>
                   <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                   <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                   <targetState>Skipped</targetState>
               </extendStateExpression>
           </targetStateSet>
        </condition>
        <instructions substitution="true">Delete the appropriate SAF profiles created by this workflow</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
       	<template>
           	<fileTemplate substitution="true">extensions/deleteSecurity.rexx</fileTemplate>
           	<submitAs maxRc="0">TSO-REXX-JCL</submitAs>
           	<maxLrecl>1024</maxLrecl>
       	</template>
    </step>

    <step name="removeAdditionalSecuritySetup">
		<title>Remove Additional Security Setup</title>
		<description>Remove additional security settings</description>
		<step name="removeKeyAccess">
	        <title>Key prefix deletion</title>
	        <description>Remove entry in CSFKEYS class</description>
	        <runAsUser substitution="true">$!{instance-EKMF_ADMIN_SECURITY}</runAsUser>
	        <approver substitution="true">$!{instance-EKMF_APPROVER_SECURITY}</approver>
        	<instructions>Executes a REXX program to remove the CSFKEYS profiles.</instructions>
        	<weight>1</weight>
        	<autoEnable>true</autoEnable>
        	<template>
            	<fileTemplate substitution="true">extensions/deleteKeyAccess.rexx</fileTemplate>
            	<submitAs maxRc="8">TSO-REXX-JCL</submitAs>
            	<maxLrecl>1024</maxLrecl>
        	</template>
		</step>
    </step>

    <step name="returnNetworkResources">
    	<title>Return network resources</title>
        <description>Return allocated network resources back to Config Assistant</description>
	    	    
	    <step name="returnHTTPPort">
	  	    <title>Return HTTP Port</title>
	        <description>Invoke RESTful API to return HTTP port back to pool.</description>
	        <condition>
	            <expression><![CDATA[${stopServer_console.stepState}=="Complete" || ${stopServer_console.stepState} == "Skipped"]]></expression>
			    <description>Check that the issue_stop stepState is Complete</description>
	               <targetStateSet>
					<description>Set state to Skipped if EKMF_HTTP_PORT_ID is not set.</description>
					<extendStateExpression>
						<description>Skipped if EKMF_HTTP_PORT_ID is null</description>
						<expression><![CDATA[ ${instance-EKMF_HTTP_PORT_ID} == undefined || ${instance-EKMF_HTTP_PORT_ID} == ""]]></expression>
						<targetState>Skipped</targetState>
					</extendStateExpression>
                    <extendStateExpression>
                        <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                        <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
				</targetStateSet>
			</condition>
	     	<instructions substitution="false">
	    	Execute step to return the HTTP port back to z/OS Communications Server.
	       	</instructions>
	       	<weight>10</weight>
	       	<skills>REST</skills>
	       	<autoEnable>true</autoEnable>
			<rest>
				<httpMethod>POST</httpMethod>
				<uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/release</uriPath>
				<requestBody substitution="true">

                    {

                    "template-uuid" : "${_workflow-templateID}",
                    "template-name" : "${_workflow-templateName}",
                    "tenant-id" : "${_workflow-tenantID}",
                    "network-parms" :
                            {       
                            "port-id" : "${instance-EKMF_HTTP_PORT_ID}"
                            }
                    }    

                </requestBody>
				<expectedStatusCode>204</expectedStatusCode>
			</rest>
	    </step>

	    <step name="returnHTTPSPort">
	  	    <title>Return HTTPS Port</title>
	        <description>Invoke RESTful API to return HTTPS port back to pool.</description>
	        <condition>
	            <expression><![CDATA[${stopServer_console.stepState}=="Complete" || ${stopServer_console.stepState} == "Skipped"]]></expression>
			    <description>Check that the issue_stop stepState is Complete</description>
	               <targetStateSet>
					<description>Set state to Skipped if EKMF_HTTPS_PORT_ID is not set.</description>
					<extendStateExpression>
						<description>Skipped if EKMF_HTTPS_PORT_ID is null</description>
						<expression><![CDATA[ ${instance-EKMF_HTTPS_PORT_ID} == undefined || ${instance-EKMF_HTTPS_PORT_ID} == ""]]></expression>
						<targetState>Skipped</targetState>
					</extendStateExpression>
                    <extendStateExpression>
                        <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                        <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
				</targetStateSet>
			</condition>
	     	<instructions substitution="false">
	    	Execute step to return the HTTPS port back to z/OS Communications Server.
	       	</instructions>
	       	<weight>10</weight>
	       	<skills>REST</skills>
	       	<autoEnable>true</autoEnable>
			<rest>
				<httpMethod>POST</httpMethod>
				<uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/release</uriPath>
				<requestBody substitution="true">

                    {

                    "template-uuid" : "${_workflow-templateID}",
                    "template-name" : "${_workflow-templateName}",
                    "tenant-id" : "${_workflow-tenantID}",
                    "network-parms" :
                            {       
                            "port-id" : "${instance-EKMF_HTTPS_PORT_ID}"
                            }
                    }    

                </requestBody>
				<expectedStatusCode>204</expectedStatusCode>
			</rest>
	    </step>

	</step>

    
</workflow>
