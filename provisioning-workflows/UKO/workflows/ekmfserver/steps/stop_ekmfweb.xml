<?xml version="1.0" encoding="UTF-8"?>
<!--
/******************************************************************************/
/* Copyright Contributors to the zOS-Workflow Project.                        */
/* SPDX-License-Identifier: Apache-2.0                                        */
/******************************************************************************/
-->
    <step name="stopServer_console">
        <title>Stop the server from the console</title>
        <description>Issue a stop command for the server. If the command fails, issue a cancel</description>

        <step name="issue_stop">
            <title>Issue stop command to the server</title>
            <description>Issue a stop command for the server.</description>
            <runAsUser substitution="true">$!{instance-EKMF_ADMIN_CONSOLE}</runAsUser>
            <approver substitution="true">$!{instance-EKMF_APPROVER_CONSOLE}</approver>
            <condition>
               <expression><![CDATA["1" == "1"]]></expression>
               <description>Only execute if validation has been passed</description>
               <targetStateSet>
                   <description>Only execute if validation has been passed</description>
                   <extendStateExpression>
                       <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                       <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                       <targetState>Skipped</targetState>
                   </extendStateExpression>
               </targetStateSet>
            </condition>
            <instructions substitution="false">Submitting script to stop the server.</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <rest>
                <httpMethod>PUT</httpMethod>
                <uriPath substitution="true">/zosmf/restconsoles/consoles/defcn</uriPath>
                <requestBody substitution="true">
                  {
                    "cmd" : "STOP ${instance-EKMF_WEB_STC}",
                    "unsol-key" : "DUMMY",
                    "unsol-detect-sync" : "Y",
                    "unsol-detect-timeout" : "${instance-EKMF_STOP_TIMEOUT}",
                    "detect-time" : "${instance-EKMF_STOP_TIMEOUT}",
                    "system" : "${_workflow-systemName}"
                  }
                </requestBody>
                <expectedStatusCode>200</expectedStatusCode>
            </rest>
        </step>

        <step name="check_status">
            <title>Check if server has stopped</title>
            <description>Check to see if the server job is still running</description>
            <prereqStep name="issue_stop"/>
            <runAsUser substitution="true">$!{instance-EKMF_ADMIN_CONSOLE}</runAsUser>
            <approver substitution="true">$!{instance-EKMF_APPROVER_CONSOLE}</approver>
            <condition>
               <expression><![CDATA["1" == "1"]]></expression>
               <description>Should the step be executed if an APPLID has been set</description>
               <targetStateSet>
                   <description>Only execute if an validation has been passed</description>
                   <extendStateExpression>
                       <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                       <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                       <targetState>Skipped</targetState>
                   </extendStateExpression>
               </targetStateSet>
            </condition>
            <instructions substitution="false">Submitting script to stop the server.</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <rest>
                <httpMethod>PUT</httpMethod>
                <uriPath substitution="true">/zosmf/restconsoles/consoles/defcn</uriPath>
                <requestBody substitution="true">
                  {
                    "cmd" : "d a,${instance-EKMF_WEB_STC}",
                    "sol-key" : "NOT FOUND",
                    "system" : "${_workflow-systemName}"

                  }
                </requestBody>
                <expectedStatusCode>200</expectedStatusCode>
                <propertyMapping mapTo="EKMF_REST_STATUS">["sol-key-detected"]</propertyMapping>
            </rest>
        </step>

        <step name="issue_cancel">
            <title>Issue cancel command to the server</title>
            <description>Cancel the server if it is still running</description>
            <runAsUser substitution="true">$!{instance-EKMF_ADMIN_CONSOLE}</runAsUser>
            <approver substitution="true">$!{instance-EKMF_APPROVER_CONSOLE}</approver>
            <condition>
                <expression><![CDATA[${check_status.stepState}=="Complete" || ${check_status.stepState} == "Skipped"]]></expression>
                <description>Only perform check if previous step has completed</description>
                <targetStateSet>
                    <description>Set state to Skipped if EKMF_REST_STATUS does not equal FALSE</description>
                    <extendStateExpression>
                           <description>Only execute it EKMF_REST_STATUS is false</description>
                           <expression><![CDATA[ ${instance-EKMF_REST_STATUS} != "false"]]></expression>
                           <targetState>Skipped</targetState>
                    </extendStateExpression>
                    <extendStateExpression>
                        <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                        <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
            </condition>
            <instructions substitution="false">Submitting script to stop the server.</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <rest>
                <httpMethod>PUT</httpMethod>
                <uriPath substitution="true">/zosmf/restconsoles/consoles/defcn</uriPath>
                <requestBody substitution="true">
                  {
                    "cmd" : "CANCEL ${instance-EKMF_WEB_STC}",
                    "unsol-key" : "DUMMY",
                    "unsol-detect-sync" : "Y",
                    "unsol-detect-timeout" : "${instance-EKMF_STOP_TIMEOUT}",
                    "detect-time" : "${instance-EKMF_STOP_TIMEOUT}",
                    "system" : "${_workflow-systemName}"
                  }
                </requestBody>
                <expectedStatusCode>200</expectedStatusCode>
            </rest>
        </step>

        <step name="check_cancel" optional="false">
            <title>Check if server has stopped</title>
            <description>Check server status after cancel request</description>
            <prereqStep name="issue_cancel"/>
            <runAsUser substitution="true">$!{instance-EKMF_ADMIN_CONSOLE}</runAsUser>
            <approver substitution="true">$!{instance-EKMF_APPROVER_CONSOLE}</approver>
            <condition>
                <expression><![CDATA[${check_status.stepState}=="Complete" || ${check_status.stepState} == "Skipped"]]></expression>
                <description>Only perform check if previous step has completed</description>
                <targetStateSet>
                    <description>Set state to Skipped if EKMF_REST_STATUS does not equal FALSE</description>
                    <extendStateExpression>
                           <description>Only execute it EKMF_REST_STATUS is false</description>
                           <expression><![CDATA[ ${instance-EKMF_REST_STATUS} != "false"]]></expression>
                           <targetState>Skipped</targetState>
                    </extendStateExpression>
                    <extendStateExpression>
                        <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                        <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
            </condition>
            <instructions>Execute check request using the Console API</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <rest>
                <httpMethod>PUT</httpMethod>
                <uriPath substitution="true">/zosmf/restconsoles/consoles/defcn</uriPath>
                <requestBody substitution="true">
                  {
                    "cmd" : "d a,${instance-EKMF_WEB_STC}",
                    "sol-key" : "NOT FOUND",
                    "system" : "${_workflow-systemName}"

                  }
                </requestBody>
                <expectedStatusCode>200</expectedStatusCode>
                <propertyMapping mapTo="EKMF_REST_STATUS">["sol-key-detected"]</propertyMapping>
            </rest>
        </step>

        <step name="stop_failed" optional="false">
            <title>Fail if server has not stopped</title>
            <description>This step will deliberately fail unless it is skipped because the server has stopped</description>
            <prereqStep name="check_cancel"/>
            <runAsUser substitution="true">$!{instance-EKMF_ADMIN_CONSOLE}</runAsUser>
            <approver substitution="true">$!{instance-EKMF_APPROVER_CONSOLE}</approver>
            <condition>
                <expression><![CDATA[${check_cancel.stepState} == "Complete" || ${check_cancel.stepState} == "Skipped"]]></expression>
                <description>Should the step be executed based on the EKMF_REST_STATUS setting</description>
                <targetStateSet>
                    <description>Check to see whether this step should be skipped</description>
                    <extendStateExpression>
                           <description>Only execute if EKMF_REST_STATUS is false</description>
                           <expression><![CDATA[ ${instance-EKMF_REST_STATUS} != "false"]]></expression>
                           <targetState>Skipped</targetState>
                    </extendStateExpression>
                    <extendStateExpression>
                        <description>Skip if EKMF_TEMPLATE_VALIDATION_PASSED is false</description>
                        <expression><![CDATA[ ${instance-EKMF_TEMPLATE_VALIDATION_PASSED} == "false" && ${instance-VALIDATE_PARAMETERS} == "YES" ]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
            </condition>
            <instructions>Execute simple Rexx command to always return a bad returncode</instructions>
            <weight>1</weight>
            <skills>z/OS Administration</skills>
            <autoEnable>true</autoEnable>
            <template>
                <inlineTemplate substitution="true">
                    exit 8
                </inlineTemplate>
                <submitAs maxRc="0">TSO-REXX-JCL</submitAs>
            </template>
        </step>
    </step>