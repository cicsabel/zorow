<?xml version="1.0" encoding="UTF-8"?>

<!-- Declare external file containing WAS variables referenced in the following steps -->
<!DOCTYPE workflow [<!ENTITY variables SYSTEM "variable_imports.xml">
                    <!ENTITY image_properties SYSTEM "extensions/image_properties.xml">
                    ]> 
                    
<!--
/******************************************************************************/
/* Copyright Contributors to the zOS-Workflow Project.                        */
/* SPDX-License-Identifier: Apache-2.0                                        */
/******************************************************************************/
-->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../workflow/schemas/workflow_v1.xsd">
    <!--  Note: The schema workflow_v1.xsd is shipped with z/OSMF. To use the schema
          to validate this XML, modify the above schema location to point to the 
          schema in z/OSMF, or copy the schema to an appropriate location.  -->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- UKO Provisioning : Provision a new database                     -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

  <workflowInfo>
      <workflowID>ukodb_Update</workflowID>
      <workflowDescription>Update UKO database</workflowDescription>
    <workflowVersion>1.0.0.0</workflowVersion>
        <!-- Build timestamp 2021.05.09.21.03.24 -->
      <vendor>IBM</vendor>
      <Provisioning>
          <productID>5655-EKM</productID>
          <productName>UKO</productName>
          <productVersion>V2R1+</productVersion>
          <softwareType>ukodb</softwareType>
      </Provisioning>
  </workflowInfo>
  
  	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!--     Include WAS variables used by the following steps -->
	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	&variables;
    <variable name="WAS_THE_DB_INSTALLED_FROM_FILE_OR_DATASET" scope="instance" visibility="public">
        <label>WAS_THE_DB_INSTALLED_FROM_FILE_OR_DATASET</label>
        <abstract>Was the db originally installed from file DDLs or a dataset</abstract>
        <description>If you have installed the db with the files provided by EKMF Web pre v3.1, select FILE. If you have installed the database with a dataset delivered by the agent, select DATASET</description>
        <category>String Variables</category>
        <string valueMustBeChoice="true" multiLine="false">
            <choice>FILE</choice>
            <choice>DATASET</choice>
            <default>FILE</default>
        </string>
    </variable>
    <variable name="WILL_THE_DB_BE_UPDATED_FROM_FILE_OR_DATASET" scope="instance" visibility="public">
        <label>WILL_THE_DB_BE_UPDATED_FROM_FILE_OR_DATASET</label>
        <abstract>Will the db be UPDATED from file DDLs or a dataset</abstract>
        <description>Are the files to update located in a dataset provided by the agent or a separate db fmid, select DATASET. Legacy option: Are the files provided by EKMF Web pre 3.1 in a folder, select FILE. </description>
        <category>String Variables</category>
        <string valueMustBeChoice="true" multiLine="false">
            <choice>FILE</choice>
            <choice>DATASET</choice>
            <default>DATASET</default>
        </string>
    </variable>


	<atCreate name="WAS_THE_DB_INSTALLED_FROM_FILE_OR_DATASET" scope="instance" prompt="true" required="false"/>
	<atCreate name="WILL_THE_DB_BE_UPDATED_FROM_FILE_OR_DATASET" scope="instance" prompt="true" required="false"/>
	<atCreate name="DB_FILE_INSTALL_PATH" scope="instance" prompt="true" required="false"/>
	<atCreate name="DB_DATASET_INSTALL_HLQ" scope="instance" prompt="true" required="false"/>

    <step name="databaseUpdate">
		<title>Update the database</title>
		<description>Update the UKO database</description>

        <step name="retrieveExistingVersion">
            <title>Retrieve current version</title>
            <description>Retrieves the current version from the Db2 database</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_DB}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_DB}</approver>
            <variableValue name="DB_CURRENT_SCHEMA" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit jcl to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <fileTemplate substitution="true">jcl/get-database-version.jcl</fileTemplate>
                <submitAs maxRc="0">JCL</submitAs>
                <maxLrecl>80</maxLrecl>
            </template>
        </step>

        <step name="createDDLFromFile" optional="false">
            <title>Create DDL from files</title>
            <description>Create the DDL to be executed</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_ZFS}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_ZFS}</approver>
            <condition>
                <expression>"1"=="1"</expression>
                <description>Skip this step if the DDLs come from a data set</description>
                <targetStateSet>
                    <description>Skip this step if the DDLs come from a data set</description>
                    <extendStateExpression>
                        <description>Skip the step when data set is selected</description>
                        <expression>${instance-WILL_THE_DB_BE_UPDATED_FROM_FILE_OR_DATASET} == null || ${instance-WILL_THE_DB_BE_UPDATED_FROM_FILE_OR_DATASET} == "DATASET"</expression>
                        <targetState>skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
            </condition>
            <variableValue name="DB_FILE_INSTALL_PATH" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB_NAME_UKO" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB_NAME_DATASET_ENCRYPTION_STATUS" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit shell script to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <inlineTemplate substitution="true">
                    
                    currentversion=$(sed -E -e 's/ *//g' -e 's/.*1_\|([A-Z0-9]*).*/\1/' ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.version);
                    echo "Current database version is: $currentversion";

                    cd ${instance-DB_FILE_INSTALL_PATH}/resources/db_definitions;

                    # retrieve the numbers from the codepage to select the correct sub folder
                    subfolder=$(echo ${instance-DB_CODEPAGE} | sed -E 's/[^[:digit:]]*([:digit:]*)/\1/' )
                    cd ${subfolder};

                    # replacing the default values in the ddls
                    sedstring="s/DKMGWEB/${instance-DB_NAME_UKO}/g;"
                    sedstring="${sedstring} s/DKMGPE1/${instance-DB_NAME_DATASET_ENCRYPTION_STATUS}/g;"
                    sedstring="${sedstring} s/BP8K0/${instance-DB_BUFFERPOOL}/g;"
                    sedstring="${sedstring} s/GKMG0001/${instance-DB_STOGROUP}/g"

                    tempversion=$currentversion;
                    echo "SET CURRENT SQLID = '${instance-DB_CURRENT_SCHEMA}' ;" > ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.ddl;
                    for i in `ls  *.ddl | xargs echo`; do
                        tempversion=$(echo $i | cut -c 1-6);
                        if [[ "$currentversion" &lt; "$tempversion" ]]; then
                            echo "DDL added to list of updates: $i"
                            sed -e "$sedstring" $i >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.ddl
                            echo "COMMIT;" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.ddl;   
                        fi
                    done; 
                    echo "Database will be updated to: $tempversion"

                </inlineTemplate>
                <submitAs>shell-JCL</submitAs>
                <!-- <output substitution="true" needResolveConflicts="false">${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties</output> -->
            </template>
        </step>

        <step name="createDdlListFromDataset" optional="false">
            <title>Create list of DDLs from a data set</title>
            <description>Create the list of DDLs to be executed</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_ZFS}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_ZFS}</approver>
            <condition>
                <expression>"1"=="1"</expression>
                <description>Skip this step if the DDLs come from files</description>
                <targetStateSet>
                    <description>Skip this step if the DDLs come from files</description>
                    <extendStateExpression>
                        <description>Skip the step when data set is selected</description>
                        <expression>${instance-WILL_THE_DB_BE_UPDATED_FROM_FILE_OR_DATASET} == "FILE"</expression>
                        <targetState>skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
            </condition>
            <variableValue name="WAS_THE_DB_INSTALLED_FROM_FILE_OR_DATASET" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="WILL_THE_DB_BE_UPDATED_FROM_FILE_OR_DATASET" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit shell script to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <inlineTemplate substitution="true">
                    currentversion=$(sed -E -e 's/ *//g' -e 's/.*1_\|([A-Z0-9]*).*/\1/' ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.version);
                    echo "Current database version is: $currentversion";

                    #UPDATE SCHEMA, SQLID
                    filelist="KMGISQLI";

                    # Update from EKMFWEB V2R10 to V2R11 level (EKMFweb V2.1.0.3 upgrade)
                    tempversion="V2R1M1";
                    if [[ "$currentversion" &lt; "$tempversion" ]]; then
                        # SPECIFIC 211 DB updates
                        filelist="${filelist} KMGUW211"
                    fi

                    # Update from EKMFWEB V2R11 to V2R20 level (EKMFweb V2.1.0.4 upgrade)
                    tempversion="V2R2M0";
                    if [[ "$currentversion" &lt; "$tempversion" ]]; then
                        # SPECIFIC 220 DB updates
                        filelist="${filelist} KMGUW220"
                        # REDO AUDIT VIEWS
                        filelist="${filelist} KMGCVAUD"
                    fi 

                    # Update from EKMFWEB V2R20 to V2R31 level (EKMFweb V2.1.0.5/7 upgrade)
                    tempversion="V2R3M1";
                    if [[ "$currentversion" &lt; "$tempversion" ]]; then
                        # SPECIFIC drop views
                        filelist="${filelist} KMGUW231"
                        # REDO EKMF VIEWS
                        filelist="${filelist} KMGCVUKT"
                        # REDO EKMF VIEWS
                        filelist="${filelist} KMGCVUK7"
                        # DEF TABLESPACE PARAM
                        filelist="${filelist} KMGCSPRM"
                        # DEF TABLE PARAM
                        filelist="${filelist} KMGCTPRM"
                        # SET CURRENT WEB VERSION
                        filelist="${filelist} KMGINWME"
                    fi

                    tempversion="V3R1M0";
                    # Update from EKMFWEB V2R31 to V3R1 level (UKO for z/OS V3.1 upgrade)
                    if [[ "$currentversion" &lt; "$tempversion" ]]; then

                            # DEF TBS FOR SETTINGS
                            filelist="${filelist} KMGCSSET"   
                            # DEF TABLES FOR SETTINGS
                            filelist="${filelist} KMGCTSET"   
                            # DROP WEB VIEW BEFORE ALTERS
                            filelist="${filelist} KMGUW31D"   

                            if [[ ${instance-WAS_THE_DB_INSTALLED_FROM_FILE_OR_DATASET} == "DATASET" ]]; then
                                echo "upgrading database that was provided from agent dataset"
                                # A) Current database build from original UKO agent DDL's
                                # ADD UKDS7 COLUMNS (EKMF AGENT)
                                filelist="${filelist} KMGUS310" 
                            fi
 
                            if [[ ${instance-WAS_THE_DB_INSTALLED_FROM_FILE_OR_DATASET} == "FILE" ]]; then
                                echo "upgrading database that was provided from UKO files"
                                # B) Current database build from EKMFWEB DDL's
                                # ADD UKDS7 COLUMNS (EKMFWEB DEF)
                                filelist="${filelist} KMGUS31W"   
                            fi 

                            # REDO EKMF VIEWS 
                            filelist="${filelist} KMGCVUKT" 
                            # REDO EKMF VIEWS 
                            filelist="${filelist} KMGCVUK7"  
                            # DEF TABLESPACE JSON OPT  
                            filelist="${filelist} KMGCSJSN"   
                            # DEF TABLE  FOR JSON OPT
                            filelist="${filelist} KMGCTJSN"   
                            # EKMFWEB UPDATES
                            filelist="${filelist} KMGUW310" 
                            # SET CURRENT WEB VERSION  
                            filelist="${filelist} KMGINWME"   

                    fi

                    echo $filelist > ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.files
                </inlineTemplate>
                <submitAs>shell-JCL</submitAs>
            </template>
        </step>
        
        <step name="createDDLFromDataset" optional="false">
            <title>Create DDL from data set</title>
            <description>Create the DDL to be executed</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_ZFS}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_ZFS}</approver>
            <condition>
                <expression>"1"=="1"</expression>
                <description>Skip this step if the DDLs come from files</description>
                <targetStateSet>
                    <description>Skip this step if the DDLs come from files</description>
                    <extendStateExpression>
                        <description>Skip the step when data set is selected</description>
                        <expression>${instance-WILL_THE_DB_BE_UPDATED_FROM_FILE_OR_DATASET} == "FILE"</expression>
                        <targetState>skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
            </condition>
            <variableValue name="DB_DATASET_INSTALL_HLQ" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB_NAME_UKO" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB_NAME_DATASET_ENCRYPTION_STATUS" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit shell script to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <fileTemplate substitution="true">scripts/createDdl.sh</fileTemplate>
                <submitAs>shell-JCL</submitAs>
            </template>
        </step>


        <step name="ExecuteUpdateDDL">
            <title>Execute DDL to update the Db2 database</title>
            <description>Execute the list of DDLs that have ben created before</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_DB}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_DB}</approver>
            <variableValue name="DB2_TEMP_HLQ" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit jcl to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <fileTemplate substitution="true">jcl/update-database.jcl</fileTemplate>
                <submitAs maxRc="4">JCL</submitAs>
                <maxLrecl>80</maxLrecl>
            </template>
        </step>

        <step name="RepairReorg">
            <title>Execute DDL to repair and reorg the Db2 database</title>
            <description>This step issues commands to repair certain tables and to REORG the database</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_DB}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_DB}</approver>
            <variableValue name="DB2_TEMP_HLQ" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit jcl to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <fileTemplate substitution="true">jcl/update-repair-reorg.jcl</fileTemplate>
                <submitAs maxRc="4">JCL</submitAs>
                <maxLrecl>80</maxLrecl>
            </template>
        </step>

    </step>

    <step name="fixAzureKeystores">
		<title>Specific Updates to Azure</title>
		<description>Update the UKO database</description>

        <step name="createDdlListFromDatasetAzure" optional="false">
            <title>Create list of DDLs from a data set</title>
            <description>Create the list of DDLs to be executed</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_ZFS}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_ZFS}</approver>
            <condition>
                <expression>"1"=="1"</expression>
                <description>Skip this step if the DDLs come from files</description>
                <targetStateSet>
                    <description>Skip this step if the DDLs come from files</description>
                    <extendStateExpression>
                        <description>Skip the step when data set is selected</description>
                        <expression>${instance-WILL_THE_DB_BE_UPDATED_FROM_FILE_OR_DATASET} == "FILE"</expression>
                        <targetState>skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
            </condition>
            <!-- <variableValue name="WAS_THE_DB_INSTALLED_FROM_FILE_OR_DATASET" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="WILL_THE_DB_BE_UPDATED_FROM_FILE_OR_DATASET" scope="instance" noPromptIfSet="false" required="false"/> -->
            <instructions substitution="true">Submit shell script to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <inlineTemplate substitution="true">
                    #backing up previous ddl
                    mv ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.ddl ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}_full.ddl

                    #UPDATE SCHEMA, SQLID
                    filelist="KMGISQLI";
                    filelist="${filelist} KMGUW31A"

                    echo $filelist > ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.files
                </inlineTemplate>
                <submitAs>shell-JCL</submitAs>
            </template>
        </step>
        
        <step name="createDDLFromDatasetAzure" optional="false">
            <title>Create DDL from data set</title>
            <description>Create the DDL to be executed</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_ZFS}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_ZFS}</approver>
            <condition>
                <expression>"1"=="1"</expression>
                <description>Skip this step if the DDLs come from files</description>
                <targetStateSet>
                    <description>Skip this step if the DDLs come from files</description>
                    <extendStateExpression>
                        <description>Skip the step when data set is selected</description>
                        <expression>${instance-WILL_THE_DB_BE_UPDATED_FROM_FILE_OR_DATASET} == "FILE"</expression>
                        <targetState>skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
            </condition>
            <!-- <variableValue name="DB_DATASET_INSTALL_HLQ" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB_NAME_UKO" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB_NAME_DATASET_ENCRYPTION_STATUS" scope="instance" noPromptIfSet="false" required="false"/> -->
            <instructions substitution="true">Submit shell script to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <fileTemplate substitution="true">scripts/createDdl.sh</fileTemplate>
                <submitAs>shell-JCL</submitAs>
            </template>
        </step>


        <step name="ExecuteUpdateDDLAzure">
            <title>Execute DDL to update the Db2 database</title>
            <description>Execute the list of DDLs that have ben created before</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_DB}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_DB}</approver>
            <!-- <variableValue name="DB2_TEMP_HLQ" scope="instance" noPromptIfSet="false" required="false"/> -->
            <instructions substitution="true">Submit jcl to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <fileTemplate substitution="true">jcl/update-database.jcl</fileTemplate>
                <submitAs maxRc="4">JCL</submitAs>
                <maxLrecl>80</maxLrecl>
            </template>
        </step>



    </step>

    <step name="cleanUpVariables">
        <title>Clean up variables</title>
        <description>Submit script to clean up temp variables</description>
        <runAsUser substitution="true">$!{instance-UKO_ADMIN_SERVER}</runAsUser>
        <approver substitution="true">$!{instance-UKO_APPROVER_SERVER}</approver>
        <instructions substitution="true">Submit shell script to execute step</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
            
                #Remove temporary files
                rm ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.version
                if [ $? -gt 0 ]; then 
                    echo "no temp property file needed to be deleted"
                fi

                <!-- #Remove temporary files
                rm ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}_full.ddl
                if [ $? -gt 0 ]; then 
                    echo "no temp ddl needed to be deleted"
                fi -->

                <!-- #Remove temporary files
                rm ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.ddl
                if [ $? -gt 0 ]; then 
                    echo "no temp ddl needed to be deleted"
                fi -->
                

            </inlineTemplate>
            <submitAs>shell-JCL</submitAs>
        </template>
    </step>
	
</workflow>