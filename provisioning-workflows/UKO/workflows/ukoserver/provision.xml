<?xml version="1.0" encoding="UTF-8"?>

<!-- Declare external file containing WAS variables referenced in the following steps -->
<!DOCTYPE workflow [<!ENTITY variables SYSTEM "variable_imports.xml">
                    <!ENTITY image_properties SYSTEM "extensions/image_properties.xml">
                    ]> 
                    
<!--
/******************************************************************************/
/* Copyright Contributors to the zOS-Workflow Project.                        */
/* SPDX-License-Identifier: Apache-2.0                                        */
/******************************************************************************/
-->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../workflow/schemas/workflow_v1.xsd">
    <!--  Note: The schema workflow_v1.xsd is shipped with z/OSMF. To use the schema
          to validate this XML, modify the above schema location to point to the 
          schema in z/OSMF, or copy the schema to an appropriate location.  -->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- UKO Provisioning : Provision a new server                   -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

  <workflowInfo>
      <workflowID>uko_Provision</workflowID>
      <workflowDescription>Provision a UKO server.</workflowDescription>
    <workflowVersion>1.0.0.0</workflowVersion>
        <!-- Build timestamp 2021.05.09.21.03.24 -->
      <vendor>IBM</vendor>
      <Provisioning>
          <productID>5655-EKM</productID>
          <productName>UKO</productName>
          <productVersion>V2R1+</productVersion>
          <softwareType>ukoserver</softwareType>
      </Provisioning>
  </workflowInfo>
  
  	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!--     Include WAS variables used by the following steps -->
	<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	&variables;
	&image_properties;

    <!--+++++++++++++++++++++++-->
    <!--   Validation Steps    -->
    <!--+++++++++++++++++++++++-->  

    <step name="validateConsoleAPI" optional="false">
        <title>Validating console commands can be issued</title>
        <description>Issue a command via the console API to ensure basic commands can be executed.</description>
        <runAsUser substitution="true">$!{instance-UKO_ADMIN_CONSOLE}</runAsUser>
        <approver substitution="true">$!{instance-UKO_APPROVER_CONSOLE}</approver>
        <condition>
            <expression><![CDATA["1" == "1"]]></expression>
            <description>Should the step be executed, based on the START_SERVER setting</description>
            <targetStateSet>
              <description/>
                <extendStateExpression>
                    <description>Skip if START_SERVER == false</description>
                  <expression><![CDATA[ ${instance-START_SERVER} == "false"]]></expression>
                    <targetState>Skipped</targetState>
                </extendStateExpression>
            </targetStateSet>
        </condition>
        <variableValue name="UKO_SERVER_STC_NAME" scope="instance" noPromptIfSet="false" required="false"/>
        <instructions>Execute console API to check if its set up correctly</instructions>
        <weight>1</weight>
        <skills>z/OS administration</skills>
        <autoEnable>true</autoEnable>
        <rest>
            <httpMethod>PUT</httpMethod>
            <uriPath substitution="true">/zosmf/restconsoles/consoles/defcn</uriPath>
            <requestBody substitution="true">
                { 
                  "cmd" : "d a,${instance-UKO_SERVER_STC_NAME}",
                  "sol-key" : "NOT FOUND",
                  "system" : "${_workflow-systemName}"
                  
                }
            </requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="UKO_REST_STATUS">["sol-key-detected"]</propertyMapping>
        </rest>
    </step>
	
    <!--++++++++++++++++++++++-->
    <!--   Provision Steps    -->
    <!--++++++++++++++++++++++-->  

    <step name="allocateNetworkResources">
    <title>Allocate Network Resources</title>
    <description>Allocate ports for the new server using REST calls to the CA.</description>

		<step name="allocateHTTPPort">
	        <title>Allocate HTTP Port</title>
	        <description>Make a REST call to allocate HTTP port</description>
            <condition>
                <expression><![CDATA["1" == "1"]]></expression>
                <description>Always perform</description>
                <targetStateSet>
                    <description>Only allocate dynamic port if requested</description>
                    <extendStateExpression>
                        <description>Skip if a port has been defined</description>
                        <expression><![CDATA[ ${instance-UKO_HTTP_PORT} != undefined && ${instance-UKO_HTTP_PORT} != ""]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
            </condition> 
			<instructions substitution="false">
	        Execute step to allocate HTTP port from z/OS Communications Server.
	        </instructions>
	        <weight>10</weight>
	        <skills>REST</skills>
	        <autoEnable>true</autoEnable>
			<rest>
				<httpMethod>POST</httpMethod>
				<uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
				<requestBody substitution="true">
				 {
                    "template-uuid" : "${_workflow-templateID}",
                    "template-name" : "${_workflow-templateName}",
                    "tenant-id" : "${_workflow-tenantID}",
                    "network-parms" :
                        {   
                            "name" : "${instance-UKO_SERVER_STC_NAME}",
                            "intent":"exclusive",
                            "job-name" : "${instance-UKO_SERVER_STC_NAME}",        
                            "system-name" : "${_workflow-systemName}"
                        }
                 } 
				</requestBody>
				<expectedStatusCode>200</expectedStatusCode>
				<propertyMapping mapTo="UKO_HTTP_PORT">["port"]</propertyMapping>
				<propertyMapping mapTo="UKO_HTTP_PORT_ID">["id"]</propertyMapping>
			</rest>
		</step>

		<step name="allocateHTTPSPort">
	        <title>Allocate HTTPS Port</title>
	        <description>Make a REST call to allocate HTTPS port</description>
            <condition>
                <expression><![CDATA["1" == "1"]]></expression>
                <description>Always perform</description>
                <targetStateSet>
                    <description>Only allocate dynamic port if requested</description>
                    <extendStateExpression>
                        <description>Skip if a port has been defined</description>
                        <expression><![CDATA[ ${instance-UKO_HTTPS_PORT} != undefined && ${instance-UKO_HTTPS_PORT} != ""]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
                </targetStateSet>
            </condition> 
			<instructions substitution="false">
	        Execute step to allocate HTTPS port from z/OS Communications Server.
	        </instructions>
	        <weight>10</weight>
	        <skills>REST</skills>
	        <autoEnable>true</autoEnable>
			<rest>
				<httpMethod>POST</httpMethod>
				<uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
				<requestBody substitution="true">
				 {
                    "template-uuid" : "${_workflow-templateID}",
                    "template-name" : "${_workflow-templateName}",
                    "tenant-id" : "${_workflow-tenantID}",
                    "network-parms" :
                        {   
                            "name" : "${instance-UKO_SERVER_STC_NAME}",
                            "intent":"exclusive",
                            "job-name" : "${instance-UKO_SERVER_STC_NAME}",        
                            "system-name" : "${_workflow-systemName}"
                        }
                 } 
				</requestBody>
				<expectedStatusCode>200</expectedStatusCode>
				<propertyMapping mapTo="UKO_HTTPS_PORT">["port"]</propertyMapping>
				<propertyMapping mapTo="UKO_HTTPS_PORT_ID">["id"]</propertyMapping>
			</rest>
		</step>

	</step>
	

    <step name="createDirectories">
        <title>Create and mount directories</title>
        <description>Create the directories required by the new UKO server</description>

        <step name="createServerDir">
            <title>Create server directory</title>
            <description>Submit script to create the UKO server directory</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_SERVER}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_SERVER}</approver>
            <variableValue name="UKO_ZFS_MOUNTPOINT" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit shell script to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <inlineTemplate substitution="true">
                                                
                    if [ ! -d "${instance-UKO_ZFS_MOUNTPOINT}/servers/" ]; then
                        mkdir ${instance-UKO_ZFS_MOUNTPOINT}/servers/
                        if [ $? -gt 0 ]; then 
                            echo "ERROR: Could not create directory" >&amp;2;
                            exit "2"; 
                        fi
                    fi

                </inlineTemplate>
                <submitAs>shell-JCL</submitAs>
            </template>
        </step>

        <step name="createZFS">
            <title>Create zFS datasets</title>
            <description>If requested, create and mount a new ZFS</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_ZFS}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_ZFS}</approver>
            <variableValue name="UKO_SERVER_STC_NAME" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_ZFS_MOUNTPOINT" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_ZOS_VSAM_VOLUME" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_ZFS_DATACLASS" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_FILE_SYSTEM_HLQ" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="WLP_OUTPUT_DIR" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit JCL to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
            <fileTemplate substitution="true">jcl/create-zfs.jcl</fileTemplate>
            <submitAs>JCL</submitAs>
            </template>
        </step>
        
        <step name="MountZFS" optional="false">
            <title>Mount zFS filesystem</title>
            <description>This step runs a script to mount the zFS dataset within the directory specified by the templates UKO_ZFS_MOUNTPOINT property. The job is run under the userid specified by the templates UKO_ADMIN_ZFS property.</description>
            <prereqStep name="createZFS"/>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_ZFS}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_ZFS}</approver>
            <instructions>Execute the mount zFS script to mount the zFS dataset (MountZFS.script)</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <fileTemplate substitution="true">scripts/mount-zfs.script</fileTemplate>
                <submitAs>shell-JCL</submitAs>
            </template>
        </step>
        

    </step>
	
    <step name="configureUkoServer">
        <title>Configure the UKO server</title>
        <description>Configure the new UKO server.</description>

        <step name="substituteServerEnv">
		    <title>Substitute server.env</title>
	        <description>replace values in server.env with template variable values</description>
	        <runAsUser substitution="true">$!{instance-UKO_ADMIN_SERVER}</runAsUser>
	        <approver substitution="true">$!{instance-UKO_APPROVER_SERVER}</approver>
            <variableValue name="UKO_TLS_KEY_STORE_KEY_RING" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_TLS_TRUST_STORE_KEY_RING" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_TLS_KEY_STORE_SERVER_CERT" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB_LOCATION" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB_CURRENT_SCHEMA" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB2_PRODUCT_PATH" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB2_LIBPATH" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_HTTP_PORT" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_HTTPS_PORT" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_UNAUTHENTICATED_USER" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_OAUTH_CLIENT_ID" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_OAUTH_CLIENT_ID_OPENAPI" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_OIDC_PROVIDER_CERT" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit shell script to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
   		         <inlineTemplate substitution="true">
                    sed "s#JAVA_HOME=.*#JAVA_HOME=${instance-JAVA_HOME}#g;
                        #if(${instance-WLP_OUTPUT_DIR} &amp;&amp; ${instance-WLP_OUTPUT_DIR} != "")
                            s#^[ \#]*WLP_OUTPUT_DIR=.*#WLP_OUTPUT_DIR=${instance-WLP_OUTPUT_DIR}#g;
                        #end
                        #if(${instance-ENABLE_MTLS_VIA_HTTPS_PORT} &amp;&amp; ${instance-ENABLE_MTLS_VIA_HTTPS_PORT} != "")
                            s#^[ \#]*TLS_CLIENT_AUTHENTICATION_SUPPORTED=.*#TLS_CLIENT_AUTHENTICATION_SUPPORTED=${instance-ENABLE_MTLS_VIA_HTTPS_PORT}#g;
                        #end
                        s#^[ \#]*TLS_KEY_STORE_KEY_RING=.*#TLS_KEY_STORE_KEY_RING=${instance-UKO_TLS_KEY_STORE_KEY_RING}#g;
                        s#^[ \#]*TLS_TRUST_STORE_KEY_RING=.*#TLS_TRUST_STORE_KEY_RING=${instance-UKO_TLS_TRUST_STORE_KEY_RING}#g;
                        s#^[ \#]*TLS_KEY_STORE_SERVER_CERT=.*#TLS_KEY_STORE_SERVER_CERT=${instance-UKO_TLS_KEY_STORE_SERVER_CERT}#g;
                        s#^[ \#]*DB_NAME_UKO=.*#DB_NAME_UKO=${instance-DB_LOCATION}#g;
                        s#^[ \#]*DB_NAME_DATASET_ENCRYPTION_STATUS=.*#DB_NAME_DATASET_ENCRYPTION_STATUS=${instance-DB_LOCATION}#g;
                        s#^[ \#]*DB_CURRENT_SCHEMA=.*#DB_CURRENT_SCHEMA=${instance-DB_CURRENT_SCHEMA}#g;
                        s#^[ \#]*DB2_PRODUCT_PATH=.*#DB2_PRODUCT_PATH=${instance-DB2_PRODUCT_PATH}#g;
                        s#^[ \#]*LIBPATH=.*#LIBPATH=${instance-DB2_LIBPATH}#g;
                        s#^[ \#]*HTTP_PORT=.*#HTTP_PORT=${instance-UKO_HTTP_PORT}#g;
                        s#^[ \#]*HTTPS_PORT=.*#HTTPS_PORT=${instance-UKO_HTTPS_PORT}#g;
                        s#^[ \#]*SAF_UNAUTHENTICATED_USER_ID=.*#SAF_UNAUTHENTICATED_USER_ID=${instance-UKO_UNAUTHENTICATED_USER}#g;
                        s#^[ \#]*UKO_OAUTH_CLIENT_ID=.*#UKO_OAUTH_CLIENT_ID=${instance-UKO_OAUTH_CLIENT_ID}#g;
                        s#^[ \#]*UKO_OAUTH_CLIENT_ID_OPENAPI=.*#UKO_OAUTH_CLIENT_ID_OPENAPI=${instance-UKO_OAUTH_CLIENT_ID_OPENAPI}#g;
                        s#^[ \#]*OIDC_PROVIDER_TRUST_ALIAS_NAME=.*#OIDC_PROVIDER_TRUST_ALIAS_NAME=${instance-UKO_OIDC_PROVIDER_CERT}#g;
                        s#^[ \#]*OIDC_PROVIDER_KEY_ALIAS_NAME=.*#OIDC_PROVIDER_KEY_ALIAS_NAME=${instance-UKO_OIDC_PROVIDER_CERT}#g" ${instance-UKO_INSTALL_DIR}/server.env > ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}/server.env;

                    # TODO: temporary manual variable add, remove for the future
                    #if(${instance-ENABLE_MTLS_VIA_HTTPS_PORT} &amp;&amp; ${instance-ENABLE_MTLS_VIA_HTTPS_PORT} != "")
                        echo TLS_CLIENT_AUTHENTICATION_SUPPORTED=${instance-ENABLE_MTLS_VIA_HTTPS_PORT} >> ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}/server.env;
                    #end
                    echo DB_MODE=DB2 >> ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}/server.env;
                    echo HOST=winmvs3n.hursley.ibm.com >> ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}/server.env;
                    echo INSTANCE_ID=00000000-0000-0000-0000-000000000000 >> ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}/server.env;
                    echo DEFAULT_VAULT_ID=00000000-0000-0000-0000-000000000000 >> ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}/server.env;

                    </inlineTemplate>
            	<submitAs>shell-JCL</submitAs>
        	</template>
        </step>

        <step name="substituteJvmOptions">
		    <title>Substitute jvm.options</title>
	        <description>replace values in jvm.options with template variable values</description>
	        <runAsUser substitution="true">$!{instance-UKO_ADMIN_SERVER}</runAsUser>
	        <approver substitution="true">$!{instance-UKO_APPROVER_SERVER}</approver>
            <variableValue name="UKO_ANGEL_NAME" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB2_JCC_SSID" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit shell script to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
   		         <inlineTemplate substitution="true">
                    sed "s#-Djava.util.prefs.userRoot=.*#-Djava.util.prefs.userRoot=${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}/preferences#g;
                        #if(${instance-UKO_ANGEL_NAME} &amp;&amp; ${instance-UKO_ANGEL_NAME} != "")
                            s#^[ \#]*-Dcom.ibm.ws.zos.core.angelName=.*#-Dcom.ibm.ws.zos.core.angelName=${instance-UKO_ANGEL_NAME}#g;
                        #end
                        s#^[ \#]*-Ddb2.jcc.ssid=.*#-Ddb2.jcc.ssid=${instance-DB2_JCC_SSID}#g" ${instance-UKO_INSTALL_DIR}/jvm.options > ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}/jvm.options;
             	 </inlineTemplate>
            	<submitAs>shell-JCL</submitAs>
        	</template>
        </step>

        <step name="setDirectoryPermissions">
            <title>Set Directory Permissions</title>
            <description>Remove read and execute access for all users to the zFS file system and set group access if required</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_SERVER}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_SERVER}</approver>
            <variableValue name="UKO_SERVER_STC_USER" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_SERVER_STC_GROUP" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Remove access to all users from ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
              <inlineTemplate substitution="true">
                export JAVA_HOME="${instance-JAVA_HOME}"
                extattr +p $JAVA_HOME/bin/java
    
                echo "Ensure read and write access to ${instance-WLP_OUTPUT_DIR}/${instance-UKO_SERVER_STC_NAME}"
                chmod -R u+rw ${instance-WLP_OUTPUT_DIR}/${instance-UKO_SERVER_STC_NAME}
                echo "Changing ownership of ${instance-WLP_OUTPUT_DIR}/${instance-UKO_SERVER_STC_NAME}"
                #if(${instance-UKO_SERVER_STC_GROUP} != "" &amp;&amp; ${instance-UKO_SERVER_STC_GROUP})               
                    chown -R ${instance-UKO_SERVER_STC_USER}:${instance-UKO_SERVER_STC_GROUP} ${instance-WLP_OUTPUT_DIR}/${instance-UKO_SERVER_STC_NAME}
                #else
                    chown -R ${instance-UKO_SERVER_STC_USER} ${instance-WLP_OUTPUT_DIR}/${instance-UKO_SERVER_STC_NAME}
                #end
    
                #if(${instance-UKO_SERVER_STC_GROUP} != "" &amp;&amp; ${instance-UKO_SERVER_STC_GROUP})
                    echo "Ensure that ${instance-UKO_SERVER_STC_GROUP} has read access to ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}"
                    chown -R ${instance-UKO_SERVER_STC_USER}:${instance-UKO_SERVER_STC_GROUP} ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}
                    chmod -R 770 ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}
                #else
                    echo "Ensure that ${instance-UKO_SERVER_STC_USER} has read access to ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}"
                    chown -R ${instance-UKO_SERVER_STC_USER} ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}
                    chmod -R 700 ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}
                #end
    
                if [ $? -eq 1 ]; then 
                    echo "chmod returned 1"
                    echo "Verify if this is due to UKO_INSTALL_DIR read-only".
                fi
                if [ $? -gt 1 ]; then 
                    echo "ERROR: Could not chmod directory" >&amp;2;
                    exit "8"; 
                fi
    
              </inlineTemplate>
              <submitAs>shell-JCL</submitAs>
               </template>
        </step>

        <step name="createSymLinks">
            <title>Create SymLinks to UKO install directory</title>
            <description>Submit script to create symbolig links to the UKO installation diretory. </description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_SERVER}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_SERVER}</approver>
            <instructions substitution="true">Submit shell script to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <inlineTemplate substitution="true">

                    # Create symlinks to the installation folder of UKO
                    cd ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}
                    ln -s ${instance-UKO_INSTALL_DIR}/EkmfWeb.properties EkmfWeb.properties
                    ln -s ${instance-UKO_INSTALL_DIR}/apps apps

                    if [ -d "${instance-UKO_INSTALL_DIR}/includes" ] 
                    then
                        ln -s ${instance-UKO_INSTALL_DIR}/includes includes; 
                    fi
                    if [ -d "${instance-UKO_INSTALL_DIR}/configDropins" ] 
                    then
                        ln -s ${instance-UKO_INSTALL_DIR}/configDropins configDropins; 
                    fi

                    ln -s ${instance-UKO_INSTALL_DIR}/resources resources
                    ln -s ${instance-UKO_INSTALL_DIR}/server.xml server.xml			    
                    ln -s ${instance-WLP_OUTPUT_DIR}/${instance-UKO_SERVER_STC_NAME} output
                </inlineTemplate>
                <submitAs>shell-JCL</submitAs>
            </template>
        </step>

    	<step name="createServerProc">
            <title>Create Server Proc</title>
            <description>Create the server proc</description>
       		<runAsUser substitution="true">$!{instance-UKO_ADMIN_TSO}</runAsUser>
       		<approver substitution="true">$!{instance-UKO_APPROVER_TSO}</approver>
            <variableValue name="UKO_ZOS_PROCLIB" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="DB2_HLQ" scope="instance" noPromptIfSet="false" required="false"/>
        	<instructions substitution="true">Submit JCL to execute step</instructions>
            <weight>5</weight>
            <autoEnable>true</autoEnable>
            <template>
               <fileTemplate substitution="true">jcl/create-server-proc.jcl</fileTemplate>
               <submitAs>JCL</submitAs>
               <maxLrecl>80</maxLrecl>
          </template>
        </step>
    </step>

    <step name="configureSecurity">
    	<title>Configure Security for UKO</title>
    	<description>Configure security for UKO and related resources</description>

        <step name="configureSAFSecurityProfiles">
            <title>Configure SAF Security</title>
            <description>Configure the new UKO server for z/OS authentication to the angel</description>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_SECURITY}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_SECURITY}</approver>
            <variableValue name="UKO_SERVER_STC_USER" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_SERVER_STC_GROUP" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_UNAUTHENTICATED_USER" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_UNAUTHENTICATED_GROUP" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_KEY_ADMIN" scope="instance" noPromptIfSet="false" required="false"/>
            <variableValue name="UKO_KEY_ADMIN_GROUP" scope="instance" noPromptIfSet="false" required="false"/>
            <instructions substitution="true">Submit rexx exec to execute step</instructions>
            <weight>1</weight>
            <autoEnable>true</autoEnable>
            <template>
                <fileTemplate substitution="true">extensions/defineSecurity.rexx</fileTemplate>
                <submitAs maxRc="0">TSO-REXX-JCL</submitAs>
                <maxLrecl>1024</maxLrecl>
            </template>
        </step>

        <step name="additionalSecuritySetup">
            <title>Additional Security Setup</title>
            <description>Specifying additional security settings</description>
            <step name="defineRoles">
                <title>Define security roles</title>
                <description>Define EJB roles required to operate UKO and grant access</description>
                <runAsUser substitution="true">$!{instance-UKO_ADMIN_SECURITY}</runAsUser>
                <approver substitution="true">$!{instance-UKO_APPROVER_SECURITY}</approver>
                <instructions>Executes a REXX program to create EJB roles and grant access</instructions>
                <weight>1</weight>
                <autoEnable>true</autoEnable>
                <template>
                    <fileTemplate substitution="true">extensions/defineRoles.rexx</fileTemplate>
                    <submitAs maxRc="4">TSO-REXX-JCL</submitAs>
                    <maxLrecl>1024</maxLrecl>
                </template>
            </step>
            <step name="defineKeyAccess">
                <title>Key prefix creation</title>
                <description>Create entry in CSFKEYS class and grant access</description>
                <runAsUser substitution="true">$!{instance-UKO_ADMIN_SECURITY}</runAsUser>
                <approver substitution="true">$!{instance-UKO_APPROVER_SECURITY}</approver>
                <variableValue name="UKO_KEY_PREFIX" scope="instance" noPromptIfSet="false" required="false"/>
                <instructions>Executes a REXX program to create the key prefix</instructions>
                <weight>1</weight>
                <autoEnable>true</autoEnable>
                <template>
                    <fileTemplate substitution="true">extensions/defineKeyAccess.rexx</fileTemplate>
                    <submitAs maxRc="4">TSO-REXX-JCL</submitAs>
                    <maxLrecl>1024</maxLrecl>
                </template>
            </step>
            <step name="defineIcsfAccess">
                <title>Define access to ICSF</title>
                <description>Define the profiles in the CSFSERV class and grant access</description>
                <runAsUser substitution="true">$!{instance-UKO_ADMIN_SECURITY}</runAsUser>
                <approver substitution="true">$!{instance-UKO_APPROVER_SECURITY}</approver>
                <instructions>Executes a REXX program to create profiles and grant access</instructions>
                <weight>1</weight>
                <autoEnable>true</autoEnable>
                <template>
                    <fileTemplate substitution="true">extensions/defineIcsfAccess.rexx</fileTemplate>
                    <submitAs maxRc="4">TSO-REXX-JCL</submitAs>
                    <maxLrecl>1024</maxLrecl>
                </template>
            </step>
        </step>

	</step>
  
    <step name="startServer">
        <title>Start the server</title>
        <description>Start the server</description>

        <step name="startServer_console">
        	<title>Start the server from console</title>
        	<description>Start the server from the console</description>
        	<runAsUser substitution="true">$!{instance-UKO_ADMIN_CONSOLE}</runAsUser>
	        <approver substitution="true">$!{instance-UKO_APPROVER_CONSOLE}</approver>
	        <condition>
      			<expression><![CDATA["1" == "1"]]></expression>
				<description>Should the step be executed, based on the START_SERVER setting</description>
				<targetStateSet>
					<description/>
	      			<extendStateExpression>
	      				<description>Skip if START_SERVER == false</description>
	            		<expression><![CDATA[ ${instance-START_SERVER} == "false"]]></expression>
	      				<targetState>Skipped</targetState>
	      			</extendStateExpression>
				</targetStateSet>
			</condition>
     		<instructions substitution="false">Submitting script to stop the server.</instructions>
        	<weight>1</weight>
        	<autoEnable>true</autoEnable>
        	<rest>
				<httpMethod>PUT</httpMethod>
				<uriPath substitution="true">/zosmf/restconsoles/consoles/defcn</uriPath>
				<requestBody substitution="true">
				  {
				    "cmd" : "START ${instance-UKO_SERVER_STC_NAME},PARMS='${instance-UKO_SERVER_STC_NAME}'",
				    "unsol-key" : "CWWKF0011I: The ${instance-UKO_SERVER_STC_NAME} server is ready",
                    "unsol-detect-sync" : "Y",
				    "unsol-detect-timeout" : "120",
				    "detect-time" : "120",
				    "system" : "${_workflow-systemName}"
				    
				  }	
				</requestBody>
				<expectedStatusCode>200</expectedStatusCode>
				<propertyMapping mapTo="UKO_REST_STATUS">["status"]</propertyMapping>
			</rest>
    	</step>
    	
    	<step name="CheckStartup" optional="false">
            <title>Checking the rest status from the start command</title>
            <description>Check the REST Status from the start command</description>
            <prereqStep name="startServer_console"/>
            <runAsUser substitution="true">$!{instance-UKO_ADMIN_TSO}</runAsUser>
            <approver substitution="true">$!{instance-UKO_APPROVER_TSO}</approver>
            <condition>
                <expression><![CDATA[${startServer_console.stepState} == "Complete" || ${startServer_console.stepState} == "Skipped"]]></expression>
                <description>Should the step be executed based on the UKO_REST_STATUS setting</description>
                <targetStateSet>
                    <description>Check to see whether this step should be skipped</description>
                    <extendStateExpression>
                        <description>Only execute it UKO_REST_STATUS is not detected</description>
                        <expression><![CDATA[ ${instance-UKO_REST_STATUS} == "detected"]]></expression>
                        <targetState>Skipped</targetState>
                    </extendStateExpression>
	      			<extendStateExpression>
	      				<description>Skip if START_SERVER == false</description>
	            		<expression><![CDATA[ ${instance-START_SERVER} == "false"]]></expression>
	      				<targetState>Skipped</targetState>
	      			</extendStateExpression>
                </targetStateSet>
            </condition>
            <instructions>Execute simple Rexx command to always return a bad returncode</instructions>
            <weight>1</weight>
            <skills>z/OS Administration</skills>
            <autoEnable>true</autoEnable>
            <template>
                <inlineTemplate substitution="true">
                    exit 8
                </inlineTemplate>
                <submitAs maxRc="0">TSO-REXX-JCL</submitAs>
            </template>
        </step> 
    </step>

    <step name="setMoreVariables" optional="false">
        <title>Set remaining variable names</title>
        <description>Set the remaining variable values</description>
        <runAsUser substitution="true">$!{instance-UKO_ADMIN_ZFS}</runAsUser>
        <approver substitution="true">$!{instance-UKO_APPROVER_ZFS}</approver>
        <instructions substitution="true">Submit shell script to execute step</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
                # Create a properties file to populate instance variables with useful user information


                host=$(hostname | tr [:upper:] [:lower:])
                if [ $? -gt 0 ]; then
                    echo "ERROR: Could not query hostname" >&amp;2;
                    exit "11"; 
                fi
                echo "UKO_ADDRESS https://$host:${instance-UKO_HTTPS_PORT}" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
                if [ $? -gt 0 ]; then 
                    echo "ERROR: Could not create properties file" >&amp;2;
                    exit "7"; 
                fi 

                currentversion=$(iconv -t IBM037 -f utf-8 ${instance-UKO_ZFS_MOUNTPOINT}/servers/${instance-UKO_SERVER_STC_NAME}/EkmfWeb.properties | grep com.ibm.websphere.productVersion | sed -E 's/.*=([^\$])/\1/')

                echo "UKO_SERVER_VERSION $currentversion" >> ${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties
            </inlineTemplate>
            <submitAs>shell-JCL</submitAs>
            <output substitution="true" needResolveConflicts="false">${instance-TEMP_DIR}/zosmf-${_workflow-workflowKey}.properties</output>
        </template>
    </step>


</workflow>