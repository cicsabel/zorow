<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
/******************************************************************************/
/* Copyright Contributors to the zOS-Workflow Project.                        */
/* SPDX-License-Identifier: Apache-2.0                                        */
/******************************************************************************/
-->

<workflow>
    <workflowInfo>
        <workflowID>WASt_Provision</workflowID>
        <workflowDescription>Provision stand alone WASt app server.</workflowDescription>
        <workflowVersion>1.0</workflowVersion>
        <vendor>IBM</vendor>
        <Provisioning>
            <productID>zosWAS</productID>
            <productName>WAS for z/OS</productName>
            <productVersion>WAS 8557</productVersion>
            <softwareType>WASt</softwareType>
        </Provisioning>
    </workflowInfo>
    <variable name="SERVER_ID_NUM" visibility="public">
        <label>Server ID Number</label>
        <abstract>Three digit number identifying server instance (including leading zeroes)</abstract>
        <description>Three digit number identifying the server instance to be provisioned. This number is embedded in the
	               server job name. For example, to provision server xx001, specify 001 for the Server ID Number.</description>
        <category>User provided parameters</category>
        <string>
            <regularExpression>[A-Z0-9]{3,3}</regularExpression>
        </string>
    </variable>
    <variable name="CONFIG_ROOT" visibility="public">
        <label>CONFIG_ROOT</label>
        <abstract>Directory to contain server profiles</abstract>
        <description>Each app server profile will be created in its own file system. This directory will contain mount points for each of those file systems.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="USER_HLQ" visibility="public">
        <label>USER_HLQ</label>
        <abstract>High level qualifier to be used for ZFS datasets</abstract>
        <description>A ZFS will be created to contain the profile for each provisioned app server. The ZFS dataset name will begin with this high level qualifier.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="SERVER_GROUP_PREFIX" visibility="public">
        <label>SERVER_GROUP_PREFIX</label>
        <abstract>Two character prefix for all servers in group</abstract>
        <description>Two character prefix for all servers in group. This is used to create user names, group names, proc names, and paths.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="CERT_AUTH_LABEL" visibility="public">
        <label>CERT_AUTH_LABEL</label>
        <abstract>CERT_AUTH_LABEL</abstract>
        <description>Label of the Certificate authority to be created.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="CLOUD_NAME" visibility="public">
        <label>CLOUD_NAME</label>
        <abstract>Cloud Name</abstract>
        <description>The name of the cloud definition in the z/OS Communication Server</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="DOMAIN_NAME" visibility="public">
        <label>DOMAIN_NAME</label>
        <abstract>Domain name to be used for provisioned app servers</abstract>
        <description>The zDaemonIPName parameter within zpmt.sh is set to a fully qualified host name formed by concatenating the SERVER_GROUP_PREFIX, the SERVER_ID_NUM, and this domain name.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="EXEC_DATASET" visibility="public">
        <label>EXEC_DATASET</label>
        <abstract>Dataset containing execs required for provisioning</abstract>
        <description>Dataset containing execs required for provisioning</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="HOSTNAME" visibility="public">
        <label>HOSTNAME</label>
        <abstract>Host name of system where zosmf is running.</abstract>
        <description>Host name of system where zosmf is running.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="JOB_STATEMENT_1" visibility="private">
        <label>JOB_STATEMENT_1</label>
        <abstract>JOB_STATEMENT_1</abstract>
        <description>First job statement provided to zpmt.sh during profile creation. This is for future use.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="JOB_STATEMENT_2" visibility="private">
        <label>JOB_STATEMENT_2</label>
        <abstract>JOB_STATEMENT_2</abstract>
        <description>Second job statement provided to zpmt.sh during profile creation. This is for future use.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="JOB_STATEMENT_3" visibility="private">
        <label>JOB_STATEMENT_3</label>
        <abstract>JOB_STATEMENT_3</abstract>
        <description>Third job statement provided to zpmt.sh during profile creation. This is for future use.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="JOB_STATEMENT_4" visibility="private">
        <label>JOB_STATEMENT_4</label>
        <abstract>JOB_STATEMENT_4</abstract>
        <description>Fourth job statement provided to zpmt.sh during profile creation. This is for future use.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="PROCLIB" visibility="public">
        <label>PROCLIB</label>
        <abstract>PROCLIB</abstract>
        <description>Name of dataset within JES PROCLIB concatenation that will contain procs used by the app server.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="SYSPLEX_NAME" visibility="public">
        <label>SYSPLEX_NAME</label>
        <abstract>SYSPLEX_NAME</abstract>
        <description>Name of the sysplex where zosmf is running</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="SYSTEM_NAME" visibility="public">
        <label>SYSTEM_NAME</label>
        <abstract>SYSTEM_NAME</abstract>
        <description>Name of the system where zosmf is running</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="WAS_PATH" visibility="public">
        <label>WAS_PATH</label>
        <abstract>WAS_PATH</abstract>
        <description>Path to WebSphere Application Server product code</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="WORK_PATH" visibility="public">
        <label>WORK_PATH</label>
        <abstract>WORK_PATH</abstract>
        <description>Path to contain the files used by zpmt.sh.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="WORKLOAD_DEPLOYMENT_GROUP" visibility="public">
        <label>WORKLOAD_DEPLOYMENT_GROUP</label>
        <abstract>Workload deployment group name</abstract>
        <description>The name of the workload deployment group in the z/OS Communication Server</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="Z_CONFIG_HFS_VOLUME" visibility="public">
        <label>Z_CONFIG_HFS_VOLUME</label>
        <abstract>Z_CONFIG_HFS_VOLUME</abstract>
        <description>DASD volume where the config zfs will be created</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="Z_CONFIG_HFS_PRIMARY" visibility="private">
        <label>Z_CONFIG_HFS_PRIMARY</label>
        <abstract>Z_CONFIG_HFS_PRIMARY</abstract>
        <description>Initial number of cylinders used for the creation of the app server config file system</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="Z_CONFIG_HFS_SECONDARY" visibility="private">
        <label>Z_CONFIG_HFS_SECONDARY</label>
        <abstract>Z_CONFIG_HFS_SECONDARY</abstract>
        <description>Secondary amount of cylinders to be specified for the app server config file system</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="Z_CONFIG_SPECIFY_SMS" visibility="private">
        <label>Z_CONFIG_SPECIFY_SMS</label>
        <abstract>Z_CONFIG_SPECIFY_SMS</abstract>
        <description>Flag indicating whether SMS parameters need to be specified for the app server config file system</description>
        <category>Specified in properties file</category>
        <boolean/>
    </variable>
    <variable name="Z_CONFIG_DATACLAS" visibility="private">
        <label>Z_CONFIG_DATACLAS</label>
        <abstract>Z_CONFIG_DATACLAS</abstract>
        <description>App server config file system DATACLAS</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="Z_CONFIG_MGMTCLAS" visibility="private">
        <label>Z_CONFIG_MGMTCLAS</label>
        <abstract>Z_CONFIG_MGMTCLAS</abstract>
        <description>App server config file system MGMTCLAS</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="Z_CONFIG_STORCLAS" visibility="private">
        <label>Z_CONFIG_STORCLAS</label>
        <abstract>Z_CONFIG_STORCLAS</abstract>
        <description>App server config file system STORCLAS</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="ZPMT_DATASET_HLQ" visibility="public">
        <label>ZPMT_DATASET_HLQ</label>
        <abstract>ZPMT_DATASET_HLQ</abstract>
        <description>High level qualifier of datasets that will contain jobs and execs used in setting up the app server.</description>
        <category>Specified in properties file</category>
        <string/>
    </variable>
    <variable name="DEFAULT_ADMIN_PW" visibility="private">
        <label>DEFAULT_ADMIN_PW</label>
        <abstract>Default admin ID password</abstract>
        <description>Default admin ID password</description>
        <category>REST</category>
        <string/>
    </variable>
    <variable name="STARTING_GID" visibility="private">
        <label>STARTING_GID</label>
        <abstract>STARTING_GID</abstract>
        <description>This is the first in a range of uids that will be referenced in the app server profile creation.</description>
        <category>Specified in properties file</category>
        <integer/>
    </variable>
    <variable name="STARTING_UID" visibility="private">
        <label>STARTING_UID</label>
        <abstract>STARTING_UID</abstract>
        <description>This is the first in a range of uids that will be referenced in the app server profile creation.</description>
        <category>Specified in properties file</category>
        <integer/>
    </variable>
    <variable name="Z_CONFIG_AUTO_GID" visibility="private">
        <label>Z_CONFIG_AUTO_GID</label>
        <abstract>Z_CONFIG_AUTO_GID</abstract>
        <description>Flag indicating whether RACF should assign GIDs automatically.</description>
        <category>Specified in properties file</category>
        <boolean/>
    </variable>
    <variable name="Z_CONFIG_AUTO_UID" visibility="private">
        <label>Z_CONFIG_AUTO_UID</label>
        <abstract>Z_CONFIG_AUTO_UID</abstract>
        <description>Flag indicating whether RACF should assign GIDs automatically.</description>
        <category>Specified in properties file</category>
        <boolean/>
    </variable>
    <variable name="WC_adminhost" visibility="public">
        <label>WC_adminhost</label>
        <abstract>WC_adminhost</abstract>
        <description>WC_adminhost</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>9060</default>
        </integer>
    </variable>
    <variable name="WC_adminhost_ID" visibility="public">
        <label>WC_adminhost_ID</label>
        <abstract>WC_adminhost_ID</abstract>
        <description>WC_adminhost_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="WC_adminhost_secure" visibility="public">
        <label>WC_adminhost_secure</label>
        <abstract>WC_adminhost_secure</abstract>
        <description>WC_adminhost_secure</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>9043</default>
        </integer>
    </variable>
    <variable name="WC_adminhost_secure_ID" visibility="public">
        <label>WC_adminhost_secure_ID</label>
        <abstract>WC_adminhost_secure_ID</abstract>
        <description>WC_adminhost_secure_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="IPC_CONNECTOR_ADDRESS" visibility="public">
        <label>IPC_CONNECTOR_ADDRESS</label>
        <abstract>IPC_CONNECTOR_ADDRESS</abstract>
        <description>IPC_CONNECTOR_ADDRESS</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="IPC_CONNECTOR_ADDRESS_ID" visibility="public">
        <label>IPC_CONNECTOR_ADDRESS_ID</label>
        <abstract>IPC_CONNECTOR_ADDRESS_ID</abstract>
        <description>IPC_CONNECTOR_ADDRESS_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="OVERLAY_TCP_LISTENER_ADDRESS" visibility="public">
        <label>OVERLAY_TCP_LISTENER_ADDRESS</label>
        <abstract>OVERLAY_TCP_LISTENER_ADDRESS</abstract>
        <description>OVERLAY_TCP_LISTENER_ADDRESS</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>11004</default>
        </integer>
    </variable>
    <variable name="OVERLAY_TCP_LISTENER_ADDRESS_ID" visibility="public">
        <label>OVERLAY_TCP_LISTENER_ADDRESS_ID</label>
        <abstract>OVERLAY_TCP_LISTENER_ADDRESS_ID</abstract>
        <description>OVERLAY_TCP_LISTENER_ADDRESS_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="OVERLAY_UDP_LISTENER_ADDRESS" visibility="public">
        <label>OVERLAY_UDP_LISTENER_ADDRESS</label>
        <abstract>OVERLAY_UDP_LISTENER_ADDRESS</abstract>
        <description>OVERLAY_UDP_LISTENER_ADDRESS</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="OVERLAY_UDP_LISTENER_ADDRESS_ID" visibility="public">
        <label>OVERLAY_UDP_LISTENER_ADDRESS_ID</label>
        <abstract>OVERLAY_UDP_LISTENER_ADDRESS_ID</abstract>
        <description>OVERLAY_UDP_LISTENER_ADDRESS_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="DAEMON_PORT" visibility="public">
        <label>DAEMON_PORT</label>
        <abstract>DAEMON_PORT</abstract>
        <description>DAEMON_PORT</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>5653</default>
        </integer>
    </variable>
    <variable name="DAEMON_PORT_ID" visibility="public">
        <label>DAEMON_PORT_ID</label>
        <abstract>DAEMON_PORT_ID</abstract>
        <description>DAEMON_PORT_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="DAEMON_SSL_PORT" visibility="public">
        <label>DAEMON_SSL_PORT</label>
        <abstract>DAEMON_SSL_PORT</abstract>
        <description>DAEMON_SSL_PORT</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>5654</default>
        </integer>
    </variable>
    <variable name="DAEMON_SSL_PORT_ID" visibility="public">
        <label>DAEMON_SSL_PORT_ID</label>
        <abstract>DAEMON_SSL_PORT_ID</abstract>
        <description>DAEMON_SSL_PORT_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="DCS_UNICAST_ADDRESS" visibility="public">
        <label>DCS_UNICAST_ADDRESS</label>
        <abstract>DCS_UNICAST_ADDRESS</abstract>
        <description>DCS_UNICAST_ADDRESS</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>9353</default>
        </integer>
    </variable>
    <variable name="DCS_UNICAST_ADDRESS_ID" visibility="public">
        <label>DCS_UNICAST_ADDRESS_ID</label>
        <abstract>DCS_UNICAST_ADDRESS_ID</abstract>
        <description>DCS_UNICAST_ADDRESS_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="WC_defaulthost" visibility="public">
        <label>WC_defaulthost</label>
        <abstract>WC_defaulthost</abstract>
        <description>WC_defaulthost</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>9080</default>
        </integer>
    </variable>
    <variable name="WC_defaulthost_ID" visibility="public">
        <label>WC_defaulthost_ID</label>
        <abstract>WC_defaulthost_ID</abstract>
        <description>WC_defaulthost_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="WC_defaulthost_secure" visibility="public">
        <label>WC_defaulthost_secure</label>
        <abstract>WC_defaulthost_secure</abstract>
        <description>WC_defaulthost_secure</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>9443</default>
        </integer>
    </variable>
    <variable name="WC_defaulthost_secure_ID" visibility="public">
        <label>WC_defaulthost_secure_ID</label>
        <abstract>WC_defaulthost_secure_ID</abstract>
        <description>WC_defaulthost_secure_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="BOOTSTRAP_ADDRESS" visibility="public">
        <label>BOOTSTRAP_ADDRESS</label>
        <abstract>BOOTSTRAP_ADDRESS</abstract>
        <description>BOOTSTRAP_ADDRESS</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>2809</default>
        </integer>
    </variable>
    <variable name="BOOTSTRAP_ADDRESS_ID" visibility="public">
        <label>BOOTSTRAP_ADDRESS_ID</label>
        <abstract>BOOTSTRAP_ADDRESS_ID</abstract>
        <description>BOOTSTRAP_ADDRESS_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="ORB_SSL_LISTENER_ADDRESS" visibility="public">
        <label>ORB_SSL_LISTENER_ADDRESS</label>
        <abstract>ORB_SSL_LISTENER_ADDRESS</abstract>
        <description>ORB_SSL_LISTENER_ADDRESS</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>11005</default>
        </integer>
    </variable>
    <variable name="ORB_SSL_LISTENER_ADDRESS_ID" visibility="public">
        <label>ORB_SSL_LISTENER_ADDRESS_ID</label>
        <abstract>ORB_SSL_LISTENER_ADDRESS_ID</abstract>
        <description>ORB_SSL_LISTENER_ADDRESS_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="SIB_MQ_ENDPOINT_ADDRESS" visibility="public">
        <label>SIB_MQ_ENDPOINT_ADDRESS</label>
        <abstract>SIB_MQ_ENDPOINT_ADDRESS</abstract>
        <description>SIB_MQ_ENDPOINT_ADDRESS</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>5558</default>
        </integer>
    </variable>
    <variable name="SIB_MQ_ENDPOINT_ADDRESS_ID" visibility="public">
        <label>SIB_MQ_ENDPOINT_ADDRESS_ID</label>
        <abstract>SIB_MQ_ENDPOINT_ADDRESS_ID</abstract>
        <description>SIB_MQ_ENDPOINT_ADDRESS_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="SIB_ENDPOINT_ADDRESS" visibility="public">
        <label>SIB_ENDPOINT_ADDRESS</label>
        <abstract>SIB_ENDPOINT_ADDRESS</abstract>
        <description>SIB_ENDPOINT_ADDRESS</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>7276</default>
        </integer>
    </variable>
    <variable name="SIB_ENDPOINT_ADDRESS_ID" visibility="public">
        <label>SIB_ENDPOINT_ADDRESS_ID</label>
        <abstract>SIB_ENDPOINT_ADDRESS_ID</abstract>
        <description>SIB_ENDPOINT_ADDRESS_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="SIB_MQ_ENDPOINT_SECURE_ADDRESS" visibility="public">
        <label>SIB_MQ_ENDPOINT_SECURE_ADDRESS</label>
        <abstract>SIB_MQ_ENDPOINT_SECURE_ADDRESS</abstract>
        <description>SIB_MQ_ENDPOINT_SECURE_ADDRESS</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>5578</default>
        </integer>
    </variable>
    <variable name="SIB_MQ_ENDPOINT_SECURE_ADDRESS_ID" visibility="public">
        <label>SIB_MQ_ENDPOINT_SECURE_ADDRESS_ID</label>
        <abstract>SIB_MQ_ENDPOINT_SECURE_ADDRESS_ID</abstract>
        <description>SIB_MQ_ENDPOINT_SECURE_ADDRESS_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="SIB_ENDPOINT_SECURE_ADDRESS" visibility="public">
        <label>SIB_ENDPOINT_SECURE_ADDRESS</label>
        <abstract>SIB_ENDPOINT_SECURE_ADDRESS</abstract>
        <description>SIB_ENDPOINT_SECURE_ADDRESS</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>7286</default>
        </integer>
    </variable>
    <variable name="SIB_ENDPOINT_SECURE_ADDRESS_ID" visibility="public">
        <label>SIB_ENDPOINT_SECURE_ADDRESS_ID</label>
        <abstract>SIB_ENDPOINT_SECURE_ADDRESS_ID</abstract>
        <description>SIB_ENDPOINT_SECURE_ADDRESS_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="SIP_DEFAULTHOST" visibility="public">
        <label>SIP_DEFAULTHOST</label>
        <abstract>SIP_DEFAULTHOST</abstract>
        <description>SIP_DEFAULTHOST</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>5060</default>
        </integer>
    </variable>
    <variable name="SIP_DEFAULTHOST_ID" visibility="public">
        <label>SIP_DEFAULTHOST_ID</label>
        <abstract>SIP_DEFAULTHOST_ID</abstract>
        <description>SIP_DEFAULTHOST_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="SIP_DEFAULTHOST_SECURE" visibility="public">
        <label>SIP_DEFAULTHOST_SECURE</label>
        <abstract>SIP_DEFAULTHOST_SECURE</abstract>
        <description>SIP_DEFAULTHOST_SECURE</description>
        <category>Response from Config Assistant</category>
        <integer>
            <default>5061</default>
        </integer>
    </variable>
    <variable name="SIP_DEFAULTHOST_SECURE_ID" visibility="public">
        <label>SIP_DEFAULTHOST_SECURE_ID</label>
        <abstract>SIP_DEFAULTHOST_SECURE_ID</abstract>
        <description>SIP_DEFAULTHOST_SECURE_ID</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="SOAP_CONNECTOR_ADDRESS" visibility="public">
        <label>SOAP_CONNECTOR_ADDRESS</label>
        <abstract>SOAP_CONNECTOR_ADDRESS</abstract>
        <description>SOAP_CONNECTOR_ADDRESS</description>
        <category>Response from Config Assistant</category>
        <integer/>
    </variable>
    <variable name="SOAP_CONNECTOR_ADDRESS_ID" visibility="public">
        <label>SOAP_CONNECTOR_ADDRESS_ID</label>
        <abstract>Soap port ID for the app server</abstract>
        <description>The ID of the allocated Soap port to use during deprovisioning</description>
        <category>Response from Config Assistant</category>
        <string/>
    </variable>
    <variable name="UID0_USER" visibility="public">
        <label>UID0_USER</label>
        <abstract>UID0_USER</abstract>
        <description>UID0_USER - Specifies id to be associated with workflow steps that run zpmt.sh and the batch jobs it creates. </description>
        <category>SAF User IDs</category>
        <string>
            <validationType>USERID</validationType>
        </string>
    </variable>
    <variable name="CONSOLE_USER" visibility="public">
        <label>CONSOLE_USER</label>
        <abstract>CONSOLE_USER</abstract>
        <description>CONSOLE_USER - Specifies user id to be associated with workflow steps that issue z/OS console commands.</description>
        <category>SAF User IDs</category>
        <string>
            <validationType>USERID</validationType>
        </string>
    </variable>
    <variable name="PWRESET_USER" visibility="public">
        <label>PWRESET_USER</label>
        <abstract>PWRESET_USER</abstract>
        <description>PWRESET_USER - Specifies user id to be associated with workflow step that resets the admin user id password.</description>
        <category>SAF User IDs</category>
        <string>
            <validationType>USERID</validationType>
        </string>
    </variable>
    <variable name="IP_USER" visibility="public">
        <label>IP_USER</label>
        <abstract>IP_USER</abstract>
        <description>IP_USER - Specifies user id to be associated with workflow steps that request IP address and ports from z/OSMF Configuration Assistant.</description>
        <category>SAF User IDs</category>
        <string>
            <validationType>USERID</validationType>
        </string>
    </variable>
    <variable name="PROCLIB_USER" visibility="public">
        <label>PROCLIB_USER</label>
        <abstract>PROCLIB_USER</abstract>
        <description>PROCLIB_USER - Specifies user id to be associated with workflow steps that update a dataset in the JES2 proclib concatenation.</description>
        <category>SAF User IDs</category>
        <string/>
    </variable>
    <variable name="UID0_APPROVER" visibility="public">
        <label>UID0_APPROVER</label>
        <abstract>UID0_APPROVER</abstract>
        <description>UID0_APPROVER - Specifies id to approve workflow steps that run zpmt.sh and the batch jobs it creates. </description>
        <category>SAF User IDs</category>
        <string>
            <validationType>USERID</validationType>
        </string>
    </variable>
    <variable name="CONSOLE_APPROVER" visibility="public">
        <label>CONSOLE_APPROVER</label>
        <abstract>CONSOLE_APPROVER</abstract>
        <description>CONSOLE_APPROVER - Specifies user id to approve workflow steps that issue z/OS console commands.</description>
        <category>SAF User IDs</category>
        <string>
            <validationType>USERID</validationType>
        </string>
    </variable>
    <variable name="PWRESET_APPROVER" visibility="public">
        <label>PWRESET_APPROVER</label>
        <abstract>PWRESET_APPROVER</abstract>
        <description>PWRESET_APPROVER - Specifies user id to approve workflow step that resets the admin user id password.</description>
        <category>SAF User IDs</category>
        <string>
            <validationType>USERID</validationType>
        </string>
    </variable>
    <variable name="IP_APPROVER" visibility="public">
        <label>IP_APPROVER</label>
        <abstract>IP_APPROVER</abstract>
        <description>IP_APPROVER - Specifies user id to approve workflow steps that request IP address and ports from z/OSMF Configuration Assistant.</description>
        <category>SAF User IDs</category>
        <string>
            <validationType>USERID</validationType>
        </string>
    </variable>
    <variable name="PROCLIB_APPROVER" visibility="public">
        <label>PROCLIB_APPROVER</label>
        <abstract>PROCLIB_APPROVER</abstract>
        <description>PROCLIB_APPROVER - Specifies user id to approve workflow steps that update a dataset in the JES2 proclib concatenation.</description>
        <category>SAF User IDs</category>
        <string/>
    </variable>
    <variable name="ADMIN_UID" visibility="private">
        <label>ADMIN_UID</label>
        <abstract>UID of the WAS admin user</abstract>
        <description>The value of this variable is calculated within the zpmt response file template based on the STARTING_UID and the SERVER_ID_NUM.</description>
        <category>Calculated</category>
        <integer/>
    </variable>
    <variable name="CONFIG_GID" visibility="private">
        <label>CONFIG_GID</label>
        <abstract>GID of the configuration group</abstract>
        <description>The value of this variable is calculated within the zpmt response file template based on the STARTING_GID and the SERVER_ID_NUM.</description>
        <category>Calculated</category>
        <string/>
    </variable>
    <variable name="CONTROL_UID" visibility="private">
        <label>CONTROL_UID</label>
        <abstract>UID of the user id for the control region</abstract>
        <description>The value of this variable is calculated within the zpmt response file template based on the STARTING_UID and the SERVER_ID_NUM.</description>
        <category>Calculated</category>
        <string/>
    </variable>
    <variable name="LOCAL_USER_GID" visibility="private">
        <label>LOCAL_USER_GID</label>
        <abstract>GID of the local user group</abstract>
        <description>The value of this variable is calculated within the zpmt response file template based on the STARTING_GID and the SERVER_ID_NUM.</description>
        <category>Calculated</category>
        <string/>
    </variable>
    <variable name="SERVANT_GID" visibility="private">
        <label>SERVANT_GID</label>
        <abstract>GID of the servant user group</abstract>
        <description>The value of this variable is calculated within the zpmt response file template based on the STARTING_GID and the SERVER_ID_NUM.</description>
        <category>Calculated</category>
        <string/>
    </variable>
    <variable name="SERVANT_UID" visibility="private">
        <label>SERVANT_UID</label>
        <abstract>UID of the user id for the servant region</abstract>
        <description>The value of this variable is calculated within the zpmt response file template based on the STARTING_UID and the SERVER_ID_NUM.</description>
        <category>Calculated</category>
        <string/>
    </variable>
    <variable name="UNAUTH_UID" visibility="private">
        <label>UNAUTH_UID</label>
        <abstract>UID of the WAS unauthenticated user</abstract>
        <description>The value of this variable is calculated within the zpmt response file template based on the STARTING_UID and the SERVER_ID_NUM.</description>
        <category>Calculated</category>
        <string/>
    </variable>
    <variable name="RUNJOBS_KEY" visibility="public">
        <label>RUNJOBS_KEY</label>
        <abstract>RUNJOBS_KEY</abstract>
        <description>Reserved for future use</description>
        <category>REST</category>
        <string/>
    </variable>
    <variable name="IP_ADDRESS" visibility="public">
        <label>IP_ADDRESS</label>
        <abstract>IP Address for the app server</abstract>
        <description>IP Address for the app server</description>
        <category>Response from Config Assistant</category>
        <string/>
    </variable>
    <variable name="IP_ADDRESS_ID" visibility="private">
        <label>IP_ADDRESS_ID</label>
        <abstract>IP Address ID for the app server</abstract>
        <description>The ID of the allocated IP address to use during deprovisioning</description>
        <category>Response from Config Assistant</category>
        <string/>
    </variable>
    <atCreate name="SERVER_ID_NUM" required="true" prompt="true"/>
    <step name="promptForID">
        <title>Provide Server ID Number</title>
        <description>Provide Server ID Number </description>
        <variableValue name="SERVER_ID_NUM" required="true"/>
        <instructions substitution="false">
        A three digit numeric id is required for each provisioned
        application server. This number is used to create various names
        and paths for the server. If you provide a number that has
        already been used, the provision process will fail. A pooling
        mechanism will be provided in the future to track which numbers
        have been used. Click FINISH to perform this step and provision
		the specified application server.
        </instructions>
        <weight>5</weight>
        <autoEnable>true</autoEnable>
    </step>
    <step name="getSoapPort" optional="false">
        <title>Get Soap Port</title>
        <description>Get Soap Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot; : &quot;exclusive&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="SOAP_CONNECTOR_ADDRESS"> [&quot;port&quot; ]</propertyMapping>
            <propertyMapping mapTo="SOAP_CONNECTOR_ADDRESS_ID"> [&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getAdminLocalPort">
        <title>Get Admin Local Port</title>
        <description>Get Admin Local Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot; : &quot;exclusive&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="IPC_CONNECTOR_ADDRESS"> [&quot;port&quot; ]</propertyMapping>
            <propertyMapping mapTo="IPC_CONNECTOR_ADDRESS_ID"> [&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getAdminConsolePort" optional="false">
        <title>Get Admin Console Port</title>
        <description>Get Admin Console Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot; ,
           &quot;port&quot;:&quot;${instance-WC_adminhost}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="WC_adminhost_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getAdminConsoleSecurePort" optional="false">
        <title>Get Admin Console Secure Port</title>
        <description>Get Admin Console Secure Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;port&quot;:&quot;${instance-WC_adminhost_secure}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="WC_adminhost_secure_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getAdminOverlayTCPPort" optional="false">
        <title>Get Admin Overlay TCP Port</title>
        <description>Get Admin Overlay TCP Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;port&quot;:&quot;${instance-OVERLAY_TCP_LISTENER_ADDRESS}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="OVERLAY_TCP_LISTENER_ADDRESS_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getAdminOverlayUDPPort" optional="false">
        <title>Get Admin Overlay UDP Port</title>
        <description>Get Admin Overlay UDP Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;UDP&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="OVERLAY_UDP_LISTENER_ADDRESS"> [&quot;port&quot; ]</propertyMapping>
            <propertyMapping mapTo="OVERLAY_UDP_LISTENER_ADDRESS_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getDaemonPort" optional="false">
        <title>Get Daemon Port</title>
        <description>Get Daemon Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-DAEMON_PORT}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}DM&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="DAEMON_PORT_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getDaemonSSLPort" optional="false">
        <title>Get Daemon SSL Port</title>
        <description>Get Daemon SSL Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-DAEMON_SSL_PORT}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}DM&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="DAEMON_SSL_PORT_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getHighAvailManagerPort" optional="false">
        <title>Get High Avail Manager Port</title>
        <description>Get High Avail Manager Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-DCS_UNICAST_ADDRESS}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="DCS_UNICAST_ADDRESS_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getHTTPTransportPort" optional="false">
        <title>Get HTTP Transport Port</title>
        <description>Get HTTP Transport Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-WC_defaulthost}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="WC_defaulthost_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getHTTPTransportSSLPort" optional="false">
        <title>Get HTTP Transport SSL Port</title>
        <description>Get HTTP Transport SSL Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-WC_defaulthost_secure}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="WC_defaulthost_secure_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getORBListenerPort" optional="false">
        <title>Get ORB Listener Port</title>
        <description>Get ORB Listener Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-BOOTSTRAP_ADDRESS}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="BOOTSTRAP_ADDRESS_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getORBListenerSSLPort" optional="false">
        <title>Get ORB Listener SSL Port</title>
        <description>Get ORB Listener SSL Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-ORB_SSL_LISTENER_ADDRESS}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="ORB_SSL_LISTENER_ADDRESS_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getServiceIntegrationMQPort" optional="false">
        <title>Get Service Integration MQ Port</title>
        <description>Get Service Integration MQ Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-SIB_MQ_ENDPOINT_ADDRESS}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="SIB_MQ_ENDPOINT_ADDRESS_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getServiceIntegrationPort" optional="false">
        <title>Get Service Integration Port</title>
        <description>Get Service Integration Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-SIB_ENDPOINT_ADDRESS}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="SIB_ENDPOINT_ADDRESS_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getServiceIntegrationSecurePort" optional="false">
        <title>Get Service Integration Secure Port</title>
        <description>Get Service Integration Secure Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-SIB_ENDPOINT_SECURE_ADDRESS}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="SIB_ENDPOINT_SECURE_ADDRESS_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getServiceIntegrationsecureMQPort" optional="false">
        <title>Get Service Integration secure MQ Port</title>
        <description>Get Service Integration Secure MQ Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-SIB_MQ_ENDPOINT_SECURE_ADDRESS}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="SIB_MQ_ENDPOINT_SECURE_ADDRESS_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getSessionInitiationPort" optional="false">
        <title>Get Session Initiation Port</title>
        <description>Get Session Initiation Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-SIP_DEFAULTHOST}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="SIP_DEFAULTHOST_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getSessionInitiationSecurePort" optional="false">
        <title>Get Session Initiation Secure Port</title>
        <description>Get Session Initiation Secure Port</description>
        <instructions substitution="false">
        This step runs automatically to obtain a port from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/port/actions/obtain</uriPath>
            <requestBody substitution="true">{

  &quot;template-uuid&quot; : &quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot; : &quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot; : &quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {

           &quot;name&quot; : &quot;${_workflow-softwareServiceInstanceName}&quot;,
           &quot;intent&quot;:&quot;shared&quot;,
           &quot;transport&quot;:&quot;TCP&quot;,
           &quot;port&quot;:&quot;${instance-SIP_DEFAULTHOST_SECURE}&quot;,
           &quot;job-name&quot;:&quot;${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}S1&quot;,
           &quot;system-name&quot; : &quot;${_workflow-systemName}&quot;
        }
  }      			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="SIP_DEFAULTHOST_SECURE_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="getDynamicIPAddress">
        <title>Get IP address</title>
        <description>Get IP address for the new server</description>
        <instructions substitution="false">
        This step runs automatically to retrieve the IP address from z/OS Communications Server.
        </instructions>
        <weight>10</weight>
        <skills>REST</skills>
        <autoEnable>true</autoEnable>
        <rest>
            <httpMethod>POST</httpMethod>
            <uriPath substitution="true">/zosmf/resource-mgmt/rest/1.0/rdp/network/ip/actions/obtain</uriPath>
            <requestBody substitution="true">
{
  &quot;template-uuid&quot;:&quot;${_workflow-templateID}&quot;,
  &quot;template-name&quot;:&quot;${_workflow-templateName}&quot;,
  &quot;tenant-id&quot;:&quot;${_workflow-tenantID}&quot;,
  &quot;network-parms&quot; :
        {
           &quot;ipaddr&quot;:&quot;any4&quot;,
           &quot;system-name&quot;:&quot;${_workflow-systemName}&quot;
        }
}
			</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="IP_ADDRESS">[&quot;ipaddr&quot;]</propertyMapping>
            <propertyMapping mapTo="IP_ADDRESS_ID">[&quot;id&quot;]</propertyMapping>
        </rest>
    </step>
    <step name="deleteZpmtWorkFiles">
        <title>Delete zpmt.sh work files</title>
        <description>Delete zpmt.sh work files</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="false">This step runs automatically to delete zpmt.sh work files</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
            rm ${instance-WORK_PATH}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.response
            rm -r ${instance-WORK_PATH}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/profiles
            rm -r ${instance-WORK_PATH}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/profileTemplates
            rm -r ${instance-WORK_PATH}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/workspace
            pwd
          </inlineTemplate>
            <submitAs>shell-JCL</submitAs>
        </template>
    </step>
    <step name="deleteZpmtDatasets">
        <title>deleteZpmtDatasets</title>
        <description>deleteZpmtDatasets</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="false">This step automatically submits an IDCAMS batch job to delete datasets created by zpmt.sh</instructions>
        <weight>5</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">//STEP1       EXEC  PGM=IDCAMS
//SYSPRINT    DD    SYSOUT=*
//SYSIN       DD    *
  DELETE '${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ZPMT.CNTL' NONVSAM
  DELETE '${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ZPMT.DATA' NONVSAM
  SET MAXCC  EQ 0
/*
          </inlineTemplate>
            <submitAs>JCL</submitAs>
        </template>
    </step>
    <step name="createResponse">
        <title>Create the zpmt.sh response file</title>
        <description>Use workflow template and velocity variable substitution to create response file</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="false">This step runs automatically to create the zpmt.sh response file from a template.</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <fileTemplate substitution="true">
              zpmt_response.template
          </fileTemplate>
            <saveAsUnixFile substitution="true">${instance-WORK_PATH}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.response</saveAsUnixFile>
        </template>
    </step>
    <step name="runZpmt">
        <title>Run zpmt.sh to build the jobs to create the app server</title>
        <description>Run zpmt.sh to build the jobs to create the app server</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="false">This step runs automatically to invoke zpmt.sh</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
            ${instance-WAS_PATH}/bin/zpmt.sh -responseFile ${instance-WORK_PATH}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.response -transfer -allocate -workspace ${instance-WORK_PATH}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/workspace
          </inlineTemplate>
            <submitAs>shell-JCL</submitAs>
        </template>
    </step>
    <step name="removeJobcards">
        <title>removeJobcards</title>
        <description>removeJobcards</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="false">This step runs automatically to remove job cards from the JCL created by zpmt.sh. This enables the JCL to be included in jobs submitted in the following workflow steps.</instructions>
        <weight>5</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">//STEP1       EXEC  PGM=IKJEFT01,DYNAMNBR=20
//SYSTSPRT    DD    SYSOUT=A
//SYSTSIN     DD    *
exec '${instance-EXEC_DATASET}(rmjobcrd)' '${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.zpmt.cntl(bbowcfs)'
exec '${instance-EXEC_DATASET}(rmjobcrd)' '${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.zpmt.cntl(bbosbram)'
exec '${instance-EXEC_DATASET}(rmjobcrd)' '${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.zpmt.cntl(bbowhfsa)'
exec '${instance-EXEC_DATASET}(rmjobcrd)' '${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.zpmt.cntl(bbowwpfa)'
exec '${instance-EXEC_DATASET}(rmjobcrd)' '${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.zpmt.cntl(bbowproc)'
/*
          </inlineTemplate>
            <submitAs>JCL</submitAs>
        </template>
    </step>
    <step name="BBOWCFS">
        <title>BBOWCFS</title>
        <description>This step will run BBOWCFS.</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="true">This step runs automatically to submit a job to create the app server's config file system. The following instructions are for running the job manually:
		     <br/>User ID requirement:
             <br/>    File system update authority (see above), and the authority to allocate
             <br/>       OMVS.PRV.WITMAINT.WAS85.BBOBASE.BBONODE.HFS
             <br/>
            <br/>Before running this job:
             <br/>
            <br/>Verify that the DD statement which defines the data set is valid for the storage rules defined on the target system.
             <br/>
            <br/>This job:
             <br/>
            <br/>o   Creates a mount point directory
             <br/>
            <br/>    /wasv85config/bbobase/bbonode
             <br/>
            <br/>o   Allocates the configuration file system
             <br/>
            <br/>    OMVS.PRV.WITMAINT.WAS85.BBOBASE.BBONODE.HFS
             <br/>
            <br/>    and mounts it at the above mount point.
             <br/>
            <br/>Note: You can run job BBO855CA instead of BBOWCFS if the target WebSphere Application Server for z/OS installation image is at least at the 8.5.5.0 service level. The BBO855CA job will use the directory specified by the TMPDIR environment variable, if defined, for temporary files. The user ID requirements fo
             <br/>
            <br/>DO NOT RUN THIS JOB IF:
             <br/>  1. The configuration file system already exists and is mounted at the desired mountpoint, or if
             <br/>
            <br/>  2. The mount point directory is controlled by automount.  Either disable the automount rule for the configuration mount point while running this job, or perform the following steps manually:
             <br/>
            <br/>     a. Allocate the configuration file system data set.
             <br/>     b. Issue the following shell commands, which will also cause automount to mount the file system
             <br/>
            <br/>     chmod 775 /wasv85config/bbobase/bbonode
             <br/>
            <br/>     chown WSADMIN:WSCFG1 /wasv85config/bbobase/bbonode
             <br/>
            <br/>BEFORE YOU BEGIN: The BBOWCFS job assumes your root file system is mounted in read/write mode.  If the root file system is not mounted in read/write mode, manually create the directory
             <br/>
            <br/>/wasv85config/bbobase/bbonode
             <br/>
            <br/>and any needed higher directories, set file permissions to 775, and set the owning user ID and group to WSADMIN and WSCFG1 before running BBOWCFS.
             <br/>
            <br/>EXAMPLE: If you plan to use /wasv8config as your directory, issue the following commands from within the OMVS shell:
             <br/>
            <br/>  mkdir -p -m 775 /wasv8config
             <br/>  chown -R WSADMIN:WSCFG1 /wasv8config</instructions>
        <weight>5</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">//ZPMTCNTL JCLLIB ORDER=${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ZPMT.CNTL
//         INCLUDE MEMBER=BBOWCFS
          </inlineTemplate>
            <submitAs>JCL</submitAs>
        </template>
    </step>
    <step name="saveInfoForDeprovisioning">
        <title>Save deprovisioning information for the new server.</title>
        <description>Save the IP address id for future deprovisioning</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="false">This step runs automatically to create a file in the app server config directory containing information that will be required for deprovisioning.</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
            echo IP_ADDRESS_ID ${instance-IP_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo SOAP_CONNECTOR_ADDRESS_ID ${instance-SOAP_CONNECTOR_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo IPC_CONNECTOR_ADDRESS_ID ${instance-IPC_CONNECTOR_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo WC_adminhost_ID ${instance-WC_adminhost_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo WC_adminhost_secure_ID ${instance-WC_adminhost_secure_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo OVERLAY_TCP_LISTENER_ADDRESS_ID ${instance-OVERLAY_TCP_LISTENER_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo OVERLAY_UDP_LISTENER_ADDRESS_ID ${instance-OVERLAY_UDP_LISTENER_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo DAEMON_PORT_ID ${instance-DAEMON_PORT_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo DAEMON_SSL_PORT_ID ${instance-DAEMON_SSL_PORT_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo DCS_UNICAST_ADDRESS_ID ${instance-DCS_UNICAST_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo WC_defaulthost_ID ${instance-WC_defaulthost_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo WC_defaulthost_secure_ID ${instance-WC_defaulthost_secure_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo BOOTSTRAP_ADDRESS_ID ${instance-BOOTSTRAP_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo ORB_SSL_LISTENER_ADDRESS_ID ${instance-ORB_SSL_LISTENER_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo SIB_MQ_ENDPOINT_ADDRESS_ID ${instance-SIB_MQ_ENDPOINT_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo SIB_ENDPOINT_ADDRESS_ID ${instance-SIB_ENDPOINT_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo SIB_MQ_ENDPOINT_SECURE_ADDRESS_ID ${instance-SIB_MQ_ENDPOINT_SECURE_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo SIB_ENDPOINT_SECURE_ADDRESS_ID ${instance-SIB_ENDPOINT_SECURE_ADDRESS_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo SIP_DEFAULTHOST_ID ${instance-SIP_DEFAULTHOST_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
            echo SIP_DEFAULTHOST_SECURE_ID ${instance-SIP_DEFAULTHOST_SECURE_ID} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.deprovision
           	</inlineTemplate>
            <submitAs>shell-JCL</submitAs>
        </template>
    </step>
    <step name="saveNetworkingInfo">
        <title>Save IP address and port numbers in a file.</title>
        <description>Save IP address and port numbers in a file</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="false">This step runs automatically to create a file in the app server config directory containing the virtual IP address and port numbers.</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
            echo IP_ADDRESS ${instance-IP_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo SOAP_CONNECTOR_ADDRESS ${instance-SOAP_CONNECTOR_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo IPC_CONNECTOR_ADDRESS ${instance-IPC_CONNECTOR_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo WC_adminhost ${instance-WC_adminhost} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo WC_adminhost_secure ${instance-WC_adminhost_secure} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo OVERLAY_TCP_LISTENER_ADDRESS ${instance-OVERLAY_TCP_LISTENER_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo OVERLAY_UDP_LISTENER_ADDRESS ${instance-OVERLAY_UDP_LISTENER_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo DAEMON_PORT ${instance-DAEMON_PORT} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo DAEMON_SSL_PORT ${instance-DAEMON_SSL_PORT} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo DCS_UNICAST_ADDRESS ${instance-DCS_UNICAST_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo WC_defaulthost ${instance-WC_defaulthost} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo WC_defaulthost_secure ${instance-WC_defaulthost_secure} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo BOOTSTRAP_ADDRESS ${instance-BOOTSTRAP_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo ORB_SSL_LISTENER_ADDRESS ${instance-ORB_SSL_LISTENER_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo SIB_MQ_ENDPOINT_ADDRESS ${instance-SIB_MQ_ENDPOINT_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo SIB_ENDPOINT_ADDRESS ${instance-SIB_ENDPOINT_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo SIB_MQ_ENDPOINT_SECURE_ADDRESS ${instance-SIB_MQ_ENDPOINT_SECURE_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo SIB_ENDPOINT_SECURE_ADDRESS ${instance-SIB_ENDPOINT_SECURE_ADDRESS} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo SIP_DEFAULTHOST ${instance-SIP_DEFAULTHOST} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
            echo SIP_DEFAULTHOST_SECURE ${instance-SIP_DEFAULTHOST_SECURE} &gt;&gt; $instance-CONFIG_ROOT/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ports
           	</inlineTemplate>
            <submitAs>shell-JCL</submitAs>
        </template>
    </step>
    <step name="BBOSBRAM">
        <title>BBOSBRAM</title>
        <description>This step will run BBOSBRAM.</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="true">This step runs automatically to create home directories for the app server user ids. The following instructions are for running this job manually:
		<br/> User ID requirement:
        <br/>    File system update authority (see Verify File Systems step).
        <br/>
            <br/>This job creates home directories for WebSphere for z/OS user IDS. These home directories will be subdirectories of /var/WebSphere/home
        <br/>
            <br/>This job will:
        <br/>
            <br/>Create the following directory with permission bits 755:
        <br/>
            <br/> /var/WebSphere/home
        <br/>
            <br/>Create the following directory with ownership WSCRU1:WSCFG1 and permission bits 770:
        <br/>
            <br/> /var/WebSphere/home/WSCFG1
        <br/>
            <br/>Create the following directory with ownership WSCRU1:WSSR1 and permission bits 770:
        <br/>
            <br/> /var/WebSphere/home/WSSR1
        <br/>
            <br/>Create the following directory with ownership WSCRU1:WSCLGP and permission bits 770:
        <br/>
            <br/> /var/WebSphere/home/WSCLGP
        <br/>
            <br/>This job should be run on each z/OS system that will host WebSphere Application Server nodes using these WebSphere for z/OS common groups and owner user ID. After execution, verify that the directories have been created with the correct permissions on each system.
        <br/>
            <br/>If these directories already exist with the specified ownership and permission on a target system, then this job does not need to be run on that system.
        <br/>
            <br/>ATTENTION: If the directory
        <br/> /var/WebSphere/home
        <br/>is used by applications other than WebSphere Application Server, make sure that the permissions set by BBOSBRAM (755) are appropriate, or change them manually. This directory must be world-readable for Websphere Application Server to run correctly.</instructions>
        <weight>5</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">//ZPMTCNTL JCLLIB ORDER=${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ZPMT.CNTL
//         INCLUDE MEMBER=BBOSBRAM
          </inlineTemplate>
            <submitAs>JCL</submitAs>
        </template>
    </step>
    <step name="BBOWHFSA">
        <title>BBOWHFSA</title>
        <description>This step will run BBOWHFSA.</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="true">This step runs automatically to create directories and populate directories in preparation for the app server profile creation. The following instructions are for running the job manually:
		     <br/>User ID requirement:
             <br/>    File system update authority (see above).
             <br/>
            <br/>This job populates the previously-created configuration file system and prepares it for profile creation.
             <br/>
            <br/>Note: You can run job BBO855HA instead of BBOWHFSA if the target WebSphere Application Server for z/OS installation image is at least at the 8.5.5.0 service level. The BBO855HA job will use the directory specified by the TMPDIR environment variable, if defined, for temporary files. The user ID requirements f
             <br/>
            <br/>Note: If the SCEERUN data set is not in the system link list, add that data set to STEPLIB for the CHECKV step in BBOWHFSA.
             <br/>
            <br/>Upon completion, examine the job output. Success is indicated with a RC=0 in the job output.</instructions>
        <weight>5</weight>
        <skills>System Programmer</skills>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">//ZPMTCNTL JCLLIB ORDER=${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ZPMT.CNTL
//         INCLUDE MEMBER=BBOWHFSA
          </inlineTemplate>
            <submitAs>JCL</submitAs>
        </template>
    </step>
    <step name="BBOWWPFA">
        <title>BBOWWPFA</title>
        <description>This step will run BBOWWPFA.</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="true">This step runs automatically to create the app server profile. The following instructions are for running the profile creation job manually:
		<br/>User ID requirement:
        <br/>    File system update authority (see Verify File System step).
        <br/>
            <br/> This job creates a profile (set of configuration files for a node) in the configuration file system.
        <br/>
            <br/> Note: You can run job BBO855PA instead of BBOWWPFA if the target WebSphere Application Server for z/OS installation image is at least at the 8.5.5.0 service level. The BBO855PA job will use the directory specified by the TMPDIR environment variable, if defined, for temporary files. The user ID requirements for t
        <br/>
            <br/>Note: If the SCEERUN2 data set is not in the system link list, add that data set to STEPLIB for the LIBVSCRP and WPROFILE steps in BBOWWPFA.
        <br/>
            <br/>Upon completion, examine the job output. Success is indicated by rc=0.
        <br/>
            <br/>Note: If the BBOWWPFA (profile creation job) fails, you must perform the following steps to remove the partially built profile:
        <br/>
            <br/>  cd /wasv85config/bbobase/bbonode/AppServer
        <br/>
            <br/>  ./bin/manageprofiles.sh -deleteAll
        <br/>
            <br/>  rm -R profiles
        <br/>
            <br/>Then, correct the problem that caused BBOWWPFA to failand re-run the job</instructions>
        <weight>5</weight>
        <skills>System Programmer</skills>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">//ZPMTCNTL JCLLIB ORDER=${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ZPMT.CNTL
//         INCLUDE MEMBER=BBOWWPFA
          </inlineTemplate>
            <submitAs>JCL</submitAs>
        </template>
    </step>
    <step name="BBOWPROC">
        <title>BBOWPROC</title>
        <description>This step will run BBOWPROCA.</description>
        <runAsUser substitution="true">$!{instance-PROCLIB_USER}</runAsUser>
        <approver substitution="true">$!{instance-PROCLIB_APPROVER}</approver>
        <instructions substitution="true">This step runs automatically to create procs for the app server. The following instructions are for running the job manually:
		<br/>User ID requirement:
        <br/>
            <br/>    Authority to update the cataloged procedure library
        <br/>
            <br/>This job creates the tailored cataloged procedures and copies them to your procedure library.
        <br/>
            <br/>Note: You can run job BBO855RA instead of BBOWPROC if the target WebSphere Application Server for z/OS installation image is at least at the 8.5.5.0 service level. The BBO855RA job will use the directory specified by the TMPDIR environment variable, if defined, for temporary files. The user ID requirements for th
        <br/>
            <br/>ATTENTION: Be aware that you may overlay existing members in the above data set.</instructions>
        <weight>5</weight>
        <skills>System Administrator</skills>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">//ZPMTCNTL JCLLIB ORDER=${instance-ZPMT_DATASET_HLQ}.${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}.ZPMT.CNTL
//         INCLUDE MEMBER=BBOWPROC
          </inlineTemplate>
            <submitAs>JCL</submitAs>
        </template>
    </step>
    <step name="resetAdminPW">
        <title>resetAdminPW</title>
        <description>resetAdminPW</description>
        <runAsUser substitution="true">$!{instance-PWRESET_USER}</runAsUser>
        <approver substitution="true">$!{instance-PWRESET_APPROVER}</approver>
        <instructions substitution="false">This step runs automatically to reset the password of the WAS admin user id.</instructions>
        <weight>5</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">/* Rexx */
trace commands
address tso
&quot;alu ${instance-SERVER_GROUP_PREFIX}AD${instance-SERVER_ID_NUM} password(${instance-DEFAULT_ADMIN_PW}) resume&quot;
exit
          </inlineTemplate>
            <submitAs>TSO-REXX-JCL</submitAs>
        </template>
    </step>
    <step name="disableSharedClassCache">
        <title>Disable shared class cache</title>
        <description>Disable shared class cache</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="false">This step runs automatically to disable shared class cache</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
		    cd ${instance-CONFIG_ROOT}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/AppServer/profiles/default/config/cells/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/nodes/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/servers/server1
            pwd
			sed -e 's/-Xshareclasses/#-Xshareclasses/g' control.jvm.options &gt; control.jvm.options.new
			chown ${instance-SERVER_GROUP_PREFIX}AD${instance-SERVER_ID_NUM}:${instance-SERVER_GROUP_PREFIX}CF${instance-SERVER_ID_NUM} control.jvm.options.new
			mv control.jvm.options control.jvm.options.unmodified
			mv control.jvm.options.new control.jvm.options
			echo &quot;***** Modified control region JVM options *****&quot;
			cat control.jvm.options
			echo
			sed -e 's/-Xshareclasses/#-Xshareclasses/g' servant.jvm.options &gt; servant.jvm.options.new
			chown ${instance-SERVER_GROUP_PREFIX}AD${instance-SERVER_ID_NUM}:${instance-SERVER_GROUP_PREFIX}CF${instance-SERVER_ID_NUM} servant.jvm.options.new
			mv servant.jvm.options servant.jvm.options.unmodified
			mv servant.jvm.options.new servant.jvm.options
			echo &quot;***** Modified servant region JVM options *****&quot;
			cat servant.jvm.options
          </inlineTemplate>
            <submitAs>shell-JCL</submitAs>
        </template>
    </step>
    <step name="startServer">
        <title>Start the app server</title>
        <description>Start the app server</description>
        <runAsUser substitution="true">$!{instance-UID0_USER}</runAsUser>
        <approver substitution="true">$!{instance-UID0_APPROVER}</approver>
        <instructions substitution="false">This step starts the app server</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
            ${instance-CONFIG_ROOT}/${instance-SERVER_GROUP_PREFIX}${instance-SERVER_ID_NUM}/AppServer/profiles/default/bin/startServer.sh server1
          </inlineTemplate>
            <submitAs>shell-JCL</submitAs>
        </template>
    </step>
</workflow>
