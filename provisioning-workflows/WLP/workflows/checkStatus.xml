<!-- Use encoding IBM-1047 if this worflow definition file is to be held
    in a z/OS dataset and encoding utf-8 if it is to be held in a UNIX file system -->

<!--
/******************************************************************************/
/* Copyright Contributors to the zOS-Workflow Project.                        */
/* SPDX-License-Identifier: Apache-2.0                                        */
/******************************************************************************/
-->

<!DOCTYPE workflow [ <!ENTITY variables SYSTEM "variable_imports.xml">]> 
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../../workflow_v1.xsd">
    <workflowInfo>
        <workflowID>checkStatus</workflowID>
        <workflowDescription>Procedure to check if the Liberty server is active</workflowDescription>
        <workflowVersion>1.0</workflowVersion>
        <vendor>IBM</vendor>
        <Provisioning>
          <productID>zosLiberty</productID>
          <productName>Liberty for z/OS</productName>
          <productVersion>Version 9</productVersion>
          <softwareType>WLP</softwareType>
      </Provisioning>
    </workflowInfo>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!--     Include Liberty variables used by the following steps -->
	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	&variables;

    <step name="checkStatusStartedTask" optional="false">
        <title>Check Liberty Server Status</title>
        <description>Check if Liberty is already active</description>
       	<runAsUser substitution="true">$!{instance-CONSOLE_RUN_AS_ID}</runAsUser>
        <approver substitution="true">$!{instance-CONSOLE_APPROVAL_ID}</approver>
		<condition>
       		<expression><![CDATA["1" == "1"]]></expression>
       		<description/>
       		<targetStateSet>
  				<description>Set state to Skipped if START_SERVER_AS_STARTED_TASK does not equal TRUE</description>
  				<extendStateExpression>
	   				<description>Skip if START_SERVER_AS_STARTED_TASK does not equal TRUE</description>
   					<expression><![CDATA[ ${instance_START_SERVER_AS_STARTED_TASK} != "TRUE"]]></expression>
 					<targetState>Skipped</targetState>
   				</extendStateExpression>
   			</targetStateSet>
   		</condition>
        <instructions>Call the console API to check for the job</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <rest>
            <httpMethod>PUT</httpMethod>
			<uriPath substitution="true">/zosmf/restconsoles/consoles/${instance-CONSOLE_NAME}</uriPath>
            <requestBody substitution="true">
                {
                  "cmd" : "d a,${_workflow-softwareServiceInstanceName}",
                  "sol-key" : "NOT FOUND"
                }
            </requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <propertyMapping mapTo="SERVER_STOP_STATUS">["sol-key-detected"]</propertyMapping>
        </rest>
    </step>


    <step name="checkStatusUSS">
        <title>Check Liberty Server Status</title>
        <description>Check if Liberty is already active</description>
		<condition>
       		<expression><![CDATA["1" == "1"]]></expression>
       		<description/>
       		<targetStateSet>
  				<description>Set state to Skipped if START_SERVER_AS_STARTED_TASK equals TRUE</description>
  				<extendStateExpression>
	   				<description>Skip if START_SERVER_AS_STARTED_TASK equals TRUE</description>
   					<expression><![CDATA[ ${instance_START_SERVER_AS_STARTED_TASK} == "TRUE"]]></expression>
 					<targetState>Skipped</targetState>
   				</extendStateExpression>
   			</targetStateSet>
   		</condition>
        <instructions substitution="true">Submit shell script to execute step</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <template>
            <inlineTemplate substitution="true">
			    export JAVA_HOME="${instance-JAVA_HOME}"
			   	export WLP_INSTALL_DIR="${instance-WLP_INSTALL_DIR}"
				export WLP_SERVER_NAME="${_workflow-softwareServiceInstanceName}"
				export WLP_USER_DIR="${instance-WLP_USER_DIR}"

				status=$($WLP_INSTALL_DIR/bin/server status $WLP_SERVER_NAME)
				if [ $(echo "$status" | grep -c "is running") = 1 ]
				then
					echo 'SERVER_STOP_STATUS false' > "${instance-TEMP_DIR}/wlp-${_workflow-softwareServiceInstanceName}-status"
				else
					echo 'SERVER_STOP_STATUS true' > "${instance-TEMP_DIR}/wlp-${_workflow-softwareServiceInstanceName}-status"
				fi
            </inlineTemplate>
            <submitAs>shell-JCL</submitAs>
        </template>
    </step>

    <step name="updateStatus">
        <title>Update Status</title>
        <description>Set SERVER_STOP_STATUS workflow variable with result of check of server status</description>
        <prereqStep name="checkStatusUSS"/>
		<condition>
	        <expression><![CDATA[ ${checkStatusUSS.stepState}=="Complete" || ${checkStatusUSS.stepState}=="Skipped"]]></expression>
       		<description/>
       		<targetStateSet>
  				<description>Set state to Skipped if START_SERVER_AS_STARTED_TASK equals TRUE</description>
  				<extendStateExpression>
	   				<description>Skip if START_SERVER_AS_STARTED_TASK equals TRUE</description>
   					<expression><![CDATA[ ${instance_START_SERVER_AS_STARTED_TASK} == "TRUE"]]></expression>
 					<targetState>Skipped</targetState>
   				</extendStateExpression>
   			</targetStateSet>
   		</condition>
        <instructions substitution="false">Execute step to read output file from previous step</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
		<template>
	    	<inlineTemplate substitution="true">
           	cat "${instance-TEMP_DIR}/wlp-${_workflow-softwareServiceInstanceName}-status"
           	</inlineTemplate>
           	<submitAs>shell-JCL</submitAs>
           	<output substitution="true" needResolveConflicts="false">${instance-TEMP_DIR}/wlp-${_workflow-softwareServiceInstanceName}-status</output>
       	</template>
	</step>

    <step name="removeStatusOutputFile">
        <title>Remove Status Output File</title>
        <description>Remove the temp file created</description>
        <prereqStep name="updateStatus"/>
		<condition>
	        <expression><![CDATA[ ${checkStatusUSS.stepState}=="Complete" || ${checkStatusUSS.stepState}=="Skipped"]]></expression>
       		<description/>
       		<targetStateSet>
  				<description>Set state to Skipped if START_SERVER_AS_STARTED_TASK equals TRUE</description>
  				<extendStateExpression>
	   				<description>Skip if START_SERVER_AS_STARTED_TASK equals TRUE</description>
   					<expression><![CDATA[ ${instance_START_SERVER_AS_STARTED_TASK} == "TRUE"]]></expression>
 					<targetState>Skipped</targetState>
   				</extendStateExpression>
   			</targetStateSet>
   		</condition>
        <instructions substitution="true">Execute step to remove the output file created</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
		<template>
	    	<inlineTemplate substitution="true">
	    	if [ -f ${instance-TEMP_DIR}/wlp-${_workflow-softwareServiceInstanceName}-status ]; then
           	    rm ${instance-TEMP_DIR}/wlp-${_workflow-softwareServiceInstanceName}-status
           	fi
           	</inlineTemplate>
           	<submitAs>shell-JCL</submitAs>
       	</template>
    </step>

    <step name="UpdateStateInstanceVariable" optional="false">
        <title>Update State Instance Variable</title>
        <description>Make REST API call to update instance variable indicating if Liberty is active</description>
        <prereqStep name="checkStatusStartedTask"/>
        <prereqStep name="updateStatus"/>
        <instructions>Call REST API to update instance variable</instructions>
        <weight>1</weight>
        <autoEnable>true</autoEnable>
        <rest>
            <httpMethod>PUT</httpMethod>
            <uriPath substitution="true">/zosmf/provisioning/rest/1.0/scr/${_workflow-parentRegistryID}/variables</uriPath>
            <requestBody substitution="true">
                #if(${instance-SERVER_STOP_STATUS} == "false")
                    #set ($state = "active")
                #else
                    #set ($state = "inactive")
                #end
                {
   					"variables":[
      					{"name":"INSTANCE_STATUS","value":"${state}","visibility":"public"}
   					]
				}
            </requestBody>
            <expectedStatusCode>204</expectedStatusCode>
        </rest>
    </step>

 </workflow>
